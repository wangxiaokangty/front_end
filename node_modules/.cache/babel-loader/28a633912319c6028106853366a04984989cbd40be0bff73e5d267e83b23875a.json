{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nvar mdurl = require('mdurl');\nvar ucmicro = require('uc.micro');\nvar entities = require('entities');\nvar LinkifyIt = require('linkify-it');\nvar punycode = require('punycode.js');\nfunction _interopNamespaceDefault(e) {\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n.default = e;\n  return Object.freeze(n);\n}\nvar mdurl__namespace = /*#__PURE__*/_interopNamespaceDefault(mdurl);\nvar ucmicro__namespace = /*#__PURE__*/_interopNamespaceDefault(ucmicro);\n\n// Utilities\n//\n\nfunction _class(obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isString(obj) {\n  return _class(obj) === '[object String]';\n}\nconst _hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction has(object, key) {\n  return _hasOwnProperty.call(object, key);\n}\n\n// Merge objects\n//\nfunction assign(obj /* from1, from2, from3, ... */) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  sources.forEach(function (source) {\n    if (!source) {\n      return;\n    }\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object');\n    }\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n  return obj;\n}\n\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt(src, pos, newElements) {\n  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n}\nfunction isValidEntityCode(c) {\n  /* eslint no-bitwise:0 */\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) {\n    return false;\n  }\n  // never used\n  if (c >= 0xFDD0 && c <= 0xFDEF) {\n    return false;\n  }\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) {\n    return false;\n  }\n  // control codes\n  if (c >= 0x00 && c <= 0x08) {\n    return false;\n  }\n  if (c === 0x0B) {\n    return false;\n  }\n  if (c >= 0x0E && c <= 0x1F) {\n    return false;\n  }\n  if (c >= 0x7F && c <= 0x9F) {\n    return false;\n  }\n  // out of range\n  if (c > 0x10FFFF) {\n    return false;\n  }\n  return true;\n}\nfunction fromCodePoint(c) {\n  /* eslint no-bitwise:0 */\n  if (c > 0xffff) {\n    c -= 0x10000;\n    const surrogate1 = 0xd800 + (c >> 10);\n    const surrogate2 = 0xdc00 + (c & 0x3ff);\n    return String.fromCharCode(surrogate1, surrogate2);\n  }\n  return String.fromCharCode(c);\n}\nconst UNESCAPE_MD_RE = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~])/g;\nconst ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;\nconst UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');\nconst DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i;\nfunction replaceEntityPattern(match, name) {\n  if (name.charCodeAt(0) === 0x23 /* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    const code = name[1].toLowerCase() === 'x' ? parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code);\n    }\n    return match;\n  }\n  const decoded = entities.decodeHTML(match);\n  if (decoded !== match) {\n    return decoded;\n  }\n  return match;\n}\n\n/* function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n} */\n\nfunction unescapeMd(str) {\n  if (str.indexOf('\\\\') < 0) {\n    return str;\n  }\n  return str.replace(UNESCAPE_MD_RE, '$1');\n}\nfunction unescapeAll(str) {\n  if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) {\n    return str;\n  }\n  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {\n    if (escaped) {\n      return escaped;\n    }\n    return replaceEntityPattern(match, entity);\n  });\n}\nconst HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nconst HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nconst HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\nfunction replaceUnsafeChar(ch) {\n  return HTML_REPLACEMENTS[ch];\n}\nfunction escapeHtml(str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n  return str;\n}\nconst REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\nfunction escapeRE(str) {\n  return str.replace(REGEXP_ESCAPE_RE, '\\\\$&');\n}\nfunction isSpace(code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true;\n  }\n  return false;\n}\n\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace(code) {\n  if (code >= 0x2000 && code <= 0x200A) {\n    return true;\n  }\n  switch (code) {\n    case 0x09: // \\t\n    case 0x0A: // \\n\n    case 0x0B: // \\v\n    case 0x0C: // \\f\n    case 0x0D: // \\r\n    case 0x20:\n    case 0xA0:\n    case 0x1680:\n    case 0x202F:\n    case 0x205F:\n    case 0x3000:\n      return true;\n  }\n  return false;\n}\n\n/* eslint-disable max-len */\n\n// Currently without astral characters support.\nfunction isPunctChar(ch) {\n  return ucmicro__namespace.P.test(ch);\n}\n\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct(ch) {\n  switch (ch) {\n    case 0x21 /* ! */:\n    case 0x22 /* \" */:\n    case 0x23 /* # */:\n    case 0x24 /* $ */:\n    case 0x25 /* % */:\n    case 0x26 /* & */:\n    case 0x27 /* ' */:\n    case 0x28 /* ( */:\n    case 0x29 /* ) */:\n    case 0x2A /* * */:\n    case 0x2B /* + */:\n    case 0x2C /* , */:\n    case 0x2D /* - */:\n    case 0x2E /* . */:\n    case 0x2F /* / */:\n    case 0x3A /* : */:\n    case 0x3B /* ; */:\n    case 0x3C /* < */:\n    case 0x3D /* = */:\n    case 0x3E /* > */:\n    case 0x3F /* ? */:\n    case 0x40 /* @ */:\n    case 0x5B /* [ */:\n    case 0x5C /* \\ */:\n    case 0x5D /* ] */:\n    case 0x5E /* ^ */:\n    case 0x5F /* _ */:\n    case 0x60 /* ` */:\n    case 0x7B /* { */:\n    case 0x7C /* | */:\n    case 0x7D /* } */:\n    case 0x7E /* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference(str) {\n  // Trim and collapse whitespace\n  //\n  str = str.trim().replace(/\\s+/g, ' ');\n\n  // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug\n  // fixed in v12 (couldn't find any details).\n  //\n  // So treat this one as a special case\n  // (remove this when node v10 is no longer supported).\n  //\n  if ('ẞ'.toLowerCase() === 'Ṿ') {\n    str = str.replace(/ẞ/g, 'ß');\n  }\n\n  // .toLowerCase().toUpperCase() should get rid of all differences\n  // between letter variants.\n  //\n  // Simple .toLowerCase() doesn't normalize 125 code points correctly,\n  // and .toUpperCase doesn't normalize 6 of them (list of exceptions:\n  // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently\n  // uppercased versions).\n  //\n  // Here's an example showing how it happens. Lets take greek letter omega:\n  // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)\n  //\n  // Unicode entries:\n  // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;\n  // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398\n  // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398\n  // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;\n  //\n  // Case-insensitive comparison should treat all of them as equivalent.\n  //\n  // But .toLowerCase() doesn't change ϑ (it's already lowercase),\n  // and .toUpperCase() doesn't change ϴ (already uppercase).\n  //\n  // Applying first lower then upper case normalizes any character:\n  // '\\u0398\\u03f4\\u03b8\\u03d1'.toLowerCase().toUpperCase() === '\\u0398\\u0398\\u0398\\u0398'\n  //\n  // Note: this is equivalent to unicode case folding; unicode normalization\n  // is a different step that is not required here.\n  //\n  // Final result should be uppercased, because it's later stored in an object\n  // (this avoid a conflict with Object.prototype members,\n  // most notably, `__proto__`)\n  //\n  return str.toLowerCase().toUpperCase();\n}\n\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nconst lib = {\n  mdurl: mdurl__namespace,\n  ucmicro: ucmicro__namespace\n};\nvar utils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  arrayReplaceAt: arrayReplaceAt,\n  assign: assign,\n  escapeHtml: escapeHtml,\n  escapeRE: escapeRE,\n  fromCodePoint: fromCodePoint,\n  has: has,\n  isMdAsciiPunct: isMdAsciiPunct,\n  isPunctChar: isPunctChar,\n  isSpace: isSpace,\n  isString: isString,\n  isValidEntityCode: isValidEntityCode,\n  isWhiteSpace: isWhiteSpace,\n  lib: lib,\n  normalizeReference: normalizeReference,\n  unescapeAll: unescapeAll,\n  unescapeMd: unescapeMd\n});\n\n// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n\nfunction parseLinkLabel(state, start, disableNested) {\n  let level, found, marker, prevPos;\n  const max = state.posMax;\n  const oldPos = state.pos;\n  state.pos = start + 1;\n  level = 1;\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos);\n    if (marker === 0x5D /* ] */) {\n      level--;\n      if (level === 0) {\n        found = true;\n        break;\n      }\n    }\n    prevPos = state.pos;\n    state.md.inline.skipToken(state);\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++;\n      } else if (disableNested) {\n        state.pos = oldPos;\n        return -1;\n      }\n    }\n  }\n  let labelEnd = -1;\n  if (found) {\n    labelEnd = state.pos;\n  }\n\n  // restore old state\n  state.pos = oldPos;\n  return labelEnd;\n}\n\n// Parse link destination\n//\n\nfunction parseLinkDestination(str, start, max) {\n  let code;\n  let pos = start;\n  const result = {\n    ok: false,\n    pos: 0,\n    lines: 0,\n    str: ''\n  };\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++;\n    while (pos < max) {\n      code = str.charCodeAt(pos);\n      if (code === 0x0A /* \\n */) {\n        return result;\n      }\n      if (code === 0x3C /* < */) {\n        return result;\n      }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1;\n        result.str = unescapeAll(str.slice(start + 1, pos));\n        result.ok = true;\n        return result;\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2;\n        continue;\n      }\n      pos++;\n    }\n\n    // no closing '>'\n    return result;\n  }\n\n  // this should be ... } else { ... branch\n\n  let level = 0;\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n    if (code === 0x20) {\n      break;\n    }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) {\n      break;\n    }\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      if (str.charCodeAt(pos + 1) === 0x20) {\n        break;\n      }\n      pos += 2;\n      continue;\n    }\n    if (code === 0x28 /* ( */) {\n      level++;\n      if (level > 32) {\n        return result;\n      }\n    }\n    if (code === 0x29 /* ) */) {\n      if (level === 0) {\n        break;\n      }\n      level--;\n    }\n    pos++;\n  }\n  if (start === pos) {\n    return result;\n  }\n  if (level !== 0) {\n    return result;\n  }\n  result.str = unescapeAll(str.slice(start, pos));\n  result.pos = pos;\n  result.ok = true;\n  return result;\n}\n\n// Parse link title\n//\n\nfunction parseLinkTitle(str, start, max) {\n  let code, marker;\n  let lines = 0;\n  let pos = start;\n  const result = {\n    ok: false,\n    pos: 0,\n    lines: 0,\n    str: ''\n  };\n  if (pos >= max) {\n    return result;\n  }\n  marker = str.charCodeAt(pos);\n  if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) {\n    return result;\n  }\n  pos++;\n\n  // if opening marker is \"(\", switch it to closing marker \")\"\n  if (marker === 0x28) {\n    marker = 0x29;\n  }\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n    if (code === marker) {\n      result.pos = pos + 1;\n      result.lines = lines;\n      result.str = unescapeAll(str.slice(start + 1, pos));\n      result.ok = true;\n      return result;\n    } else if (code === 0x28 /* ( */ && marker === 0x29 /* ) */) {\n      return result;\n    } else if (code === 0x0A) {\n      lines++;\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++;\n      if (str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n    pos++;\n  }\n  return result;\n}\n\n// Just a shortcut for bulk export\n\nvar helpers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  parseLinkDestination: parseLinkDestination,\n  parseLinkLabel: parseLinkLabel,\n  parseLinkTitle: parseLinkTitle\n});\n\n/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n\nconst default_rules = {};\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx];\n  return '<code' + slf.renderAttrs(token) + '>' + escapeHtml(token.content) + '</code>';\n};\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx];\n  return '<pre' + slf.renderAttrs(token) + '><code>' + escapeHtml(tokens[idx].content) + '</code></pre>\\n';\n};\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx];\n  const info = token.info ? unescapeAll(token.info).trim() : '';\n  let langName = '';\n  let langAttrs = '';\n  if (info) {\n    const arr = info.split(/(\\s+)/g);\n    langName = arr[0];\n    langAttrs = arr.slice(2).join('');\n  }\n  let highlighted;\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content);\n  } else {\n    highlighted = escapeHtml(token.content);\n  }\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n';\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .deepClone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    const i = token.attrIndex('class');\n    const tmpAttrs = token.attrs ? token.attrs.slice() : [];\n    if (i < 0) {\n      tmpAttrs.push(['class', options.langPrefix + langName]);\n    } else {\n      tmpAttrs[i] = tmpAttrs[i].slice();\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;\n    }\n\n    // Fake token just to render attributes\n    const tmpToken = {\n      attrs: tmpAttrs\n    };\n    return `<pre><code${slf.renderAttrs(tmpToken)}>${highlighted}</code></pre>\\n`;\n  }\n  return `<pre><code${slf.renderAttrs(token)}>${highlighted}</code></pre>\\n`;\n};\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx];\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] = slf.renderInlineAsText(token.children, options, env);\n  return slf.renderToken(tokens, idx, options);\n};\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n};\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? options.xhtmlOut ? '<br />\\n' : '<br>\\n' : '\\n';\n};\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content);\n};\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer() {\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules);\n}\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs(token) {\n  let i, l, result;\n  if (!token.attrs) {\n    return '';\n  }\n  result = '';\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"';\n  }\n  return result;\n};\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n  const token = tokens[idx];\n  let result = '';\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return '';\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n';\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag;\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token);\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /';\n  }\n\n  // Check if we need to add a newline after this tag\n  let needLf = false;\n  if (token.block) {\n    needLf = true;\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        const nextToken = tokens[idx + 1];\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false;\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false;\n        }\n      }\n    }\n  }\n  result += needLf ? '>\\n' : '>';\n  return result;\n};\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  let result = '';\n  const rules = this.rules;\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type;\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options);\n    }\n  }\n  return result;\n};\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  let result = '';\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    switch (tokens[i].type) {\n      case 'text':\n        result += tokens[i].content;\n        break;\n      case 'image':\n        result += this.renderInlineAsText(tokens[i].children, options, env);\n        break;\n      case 'html_inline':\n      case 'html_block':\n        result += tokens[i].content;\n        break;\n      case 'softbreak':\n      case 'hardbreak':\n        result += '\\n';\n        break;\n      // all other tokens are skipped\n    }\n  }\n  return result;\n};\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  let result = '';\n  const rules = this.rules;\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type;\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options, env);\n    }\n  }\n  return result;\n};\n\n/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n\n/**\n * new Ruler()\n **/\nfunction Ruler() {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = [];\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null;\n}\n\n// Helper methods, should not be used directly\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (let i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  const self = this;\n  const chains = [''];\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) {\n      return;\n    }\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName);\n      }\n    });\n  });\n  self.__cache__ = {};\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = [];\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) {\n        return;\n      }\n      if (chain && rule.alt.indexOf(chain) < 0) {\n        return;\n      }\n      self.__cache__[chain].push(rule.fn);\n    });\n  });\n};\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  const index = this.__find__(name);\n  const opt = options || {};\n  if (index === -1) {\n    throw new Error('Parser rule not found: ' + name);\n  }\n  this.__rules__[index].fn = fn;\n  this.__rules__[index].alt = opt.alt || [];\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  const index = this.__find__(beforeName);\n  const opt = options || {};\n  if (index === -1) {\n    throw new Error('Parser rule not found: ' + beforeName);\n  }\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  });\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  const index = this.__find__(afterName);\n  const opt = options || {};\n  if (index === -1) {\n    throw new Error('Parser rule not found: ' + afterName);\n  }\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  });\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  const opt = options || {};\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  });\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) {\n    list = [list];\n  }\n  const result = [];\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    const idx = this.__find__(name);\n    if (idx < 0) {\n      if (ignoreInvalid) {\n        return;\n      }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = true;\n    result.push(name);\n  }, this);\n  this.__cache__ = null;\n  return result;\n};\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) {\n    list = [list];\n  }\n  this.__rules__.forEach(function (rule) {\n    rule.enabled = false;\n  });\n  this.enable(list, ignoreInvalid);\n};\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) {\n    list = [list];\n  }\n  const result = [];\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    const idx = this.__find__(name);\n    if (idx < 0) {\n      if (ignoreInvalid) {\n        return;\n      }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = false;\n    result.push(name);\n  }, this);\n  this.__cache__ = null;\n  return result;\n};\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__();\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || [];\n};\n\n// Token class\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token(type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type = type;\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag = tag;\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs = null;\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map = null;\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting = nesting;\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level = 0;\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null;\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content = '';\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup = '';\n\n  /**\n   * Token#info -> String\n   *\n   * Additional information:\n   *\n   * - Info string for \"fence\" tokens\n   * - The value \"auto\" for autolink \"link_open\" and \"link_close\" tokens\n   * - The string value of the item marker for ordered-list \"list_item_open\" tokens\n   **/\n  this.info = '';\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta = null;\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block = false;\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden = false;\n}\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex(name) {\n  if (!this.attrs) {\n    return -1;\n  }\n  const attrs = this.attrs;\n  for (let i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush(attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData);\n  } else {\n    this.attrs = [attrData];\n  }\n};\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet(name, value) {\n  const idx = this.attrIndex(name);\n  const attrData = [name, value];\n  if (idx < 0) {\n    this.attrPush(attrData);\n  } else {\n    this.attrs[idx] = attrData;\n  }\n};\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet(name) {\n  const idx = this.attrIndex(name);\n  let value = null;\n  if (idx >= 0) {\n    value = this.attrs[idx][1];\n  }\n  return value;\n};\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin(name, value) {\n  const idx = this.attrIndex(name);\n  if (idx < 0) {\n    this.attrPush([name, value]);\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;\n  }\n};\n\n// Core state object\n//\n\nfunction StateCore(src, md, env) {\n  this.src = src;\n  this.env = env;\n  this.tokens = [];\n  this.inlineMode = false;\n  this.md = md; // link to parser instance\n}\n\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token;\n\n// Normalize input string\n\n// https://spec.commonmark.org/0.29/#line-ending\nconst NEWLINES_RE = /\\r\\n?|\\n/g;\nconst NULL_RE = /\\0/g;\nfunction normalize(state) {\n  let str;\n\n  // Normalize newlines\n  str = state.src.replace(NEWLINES_RE, '\\n');\n\n  // Replace NULL characters\n  str = str.replace(NULL_RE, '\\uFFFD');\n  state.src = str;\n}\nfunction block(state) {\n  let token;\n  if (state.inlineMode) {\n    token = new state.Token('inline', '', 0);\n    token.content = state.src;\n    token.map = [0, 1];\n    token.children = [];\n    state.tokens.push(token);\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens);\n  }\n}\nfunction inline(state) {\n  const tokens = state.tokens;\n\n  // Parse inlines\n  for (let i = 0, l = tokens.length; i < l; i++) {\n    const tok = tokens[i];\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n    }\n  }\n}\n\n// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n\nfunction isLinkOpen$1(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose$1(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\nfunction linkify$1(state) {\n  const blockTokens = state.tokens;\n  if (!state.md.options.linkify) {\n    return;\n  }\n  for (let j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' || !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue;\n    }\n    let tokens = blockTokens[j].children;\n    let htmlLinkLevel = 0;\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      const currentToken = tokens[i];\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--;\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--;\n        }\n        continue;\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen$1(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--;\n        }\n        if (isLinkClose$1(currentToken.content)) {\n          htmlLinkLevel++;\n        }\n      }\n      if (htmlLinkLevel > 0) {\n        continue;\n      }\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n        const text = currentToken.content;\n        let links = state.md.linkify.match(text);\n\n        // Now split string to nodes\n        const nodes = [];\n        let level = currentToken.level;\n        let lastPos = 0;\n\n        // forbid escape sequence at the start of the string,\n        // this avoids http\\://example.com/ from being linkified as\n        // http:<a href=\"//example.com/\">//example.com/</a>\n        if (links.length > 0 && links[0].index === 0 && i > 0 && tokens[i - 1].type === 'text_special') {\n          links = links.slice(1);\n        }\n        for (let ln = 0; ln < links.length; ln++) {\n          const url = links[ln].url;\n          const fullUrl = state.md.normalizeLink(url);\n          if (!state.md.validateLink(fullUrl)) {\n            continue;\n          }\n          let urlText = links[ln].text;\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n          } else {\n            urlText = state.md.normalizeLinkText(urlText);\n          }\n          const pos = links[ln].index;\n          if (pos > lastPos) {\n            const token = new state.Token('text', '', 0);\n            token.content = text.slice(lastPos, pos);\n            token.level = level;\n            nodes.push(token);\n          }\n          const token_o = new state.Token('link_open', 'a', 1);\n          token_o.attrs = [['href', fullUrl]];\n          token_o.level = level++;\n          token_o.markup = 'linkify';\n          token_o.info = 'auto';\n          nodes.push(token_o);\n          const token_t = new state.Token('text', '', 0);\n          token_t.content = urlText;\n          token_t.level = level;\n          nodes.push(token_t);\n          const token_c = new state.Token('link_close', 'a', -1);\n          token_c.level = --level;\n          token_c.markup = 'linkify';\n          token_c.info = 'auto';\n          nodes.push(token_c);\n          lastPos = links[ln].lastIndex;\n        }\n        if (lastPos < text.length) {\n          const token = new state.Token('text', '', 0);\n          token.content = text.slice(lastPos);\n          token.level = level;\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n}\n\n// Simple typographic replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - multiplications 2 x 4 -> 2 × 4\n\nconst RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nconst SCOPED_ABBR_TEST_RE = /\\((c|tm|r)\\)/i;\nconst SCOPED_ABBR_RE = /\\((c|tm|r)\\)/ig;\nconst SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  tm: '™'\n};\nfunction replaceFn(match, name) {\n  return SCOPED_ABBR[name.toLowerCase()];\n}\nfunction replace_scoped(inlineTokens) {\n  let inside_autolink = 0;\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i];\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n    }\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\nfunction replace_rare(inlineTokens) {\n  let inside_autolink = 0;\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i];\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content.replace(/\\+-/g, '±')\n        // .., ..., ....... -> …\n        // but ?..... & !..... -> ?.. & !..\n        .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..').replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n        // em-dash\n        .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\\u2014')\n        // en-dash\n        .replace(/(^|\\s)--(?=\\s|$)/mg, '$1\\u2013').replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, '$1\\u2013');\n      }\n    }\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\nfunction replace(state) {\n  let blkIdx;\n  if (!state.md.options.typographer) {\n    return;\n  }\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline') {\n      continue;\n    }\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children);\n    }\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children);\n    }\n  }\n}\n\n// Convert straight quotation marks to typographic ones\n//\n\nconst QUOTE_TEST_RE = /['\"]/;\nconst QUOTE_RE = /['\"]/g;\nconst APOSTROPHE = '\\u2019'; /* ’ */\n\nfunction replaceAt(str, index, ch) {\n  return str.slice(0, index) + ch + str.slice(index + 1);\n}\nfunction process_inlines(tokens, state) {\n  let j;\n  const stack = [];\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const thisLevel = tokens[i].level;\n    for (j = stack.length - 1; j >= 0; j--) {\n      if (stack[j].level <= thisLevel) {\n        break;\n      }\n    }\n    stack.length = j + 1;\n    if (token.type !== 'text') {\n      continue;\n    }\n    let text = token.content;\n    let pos = 0;\n    let max = text.length;\n\n    /* eslint no-labels:0,block-scoped-var:0 */\n    OUTER: while (pos < max) {\n      QUOTE_RE.lastIndex = pos;\n      const t = QUOTE_RE.exec(text);\n      if (!t) {\n        break;\n      }\n      let canOpen = true;\n      let canClose = true;\n      pos = t.index + 1;\n      const isSingle = t[0] === \"'\";\n\n      // Find previous character,\n      // default to space if it's the beginning of the line\n      //\n      let lastChar = 0x20;\n      if (t.index - 1 >= 0) {\n        lastChar = text.charCodeAt(t.index - 1);\n      } else {\n        for (j = i - 1; j >= 0; j--) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20\n          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n          break;\n        }\n      }\n\n      // Find next character,\n      // default to space if it's the end of the line\n      //\n      let nextChar = 0x20;\n      if (pos < max) {\n        nextChar = text.charCodeAt(pos);\n      } else {\n        for (j = i + 1; j < tokens.length; j++) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20\n          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          nextChar = tokens[j].content.charCodeAt(0);\n          break;\n        }\n      }\n      const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n      const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n      const isLastWhiteSpace = isWhiteSpace(lastChar);\n      const isNextWhiteSpace = isWhiteSpace(nextChar);\n      if (isNextWhiteSpace) {\n        canOpen = false;\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          canOpen = false;\n        }\n      }\n      if (isLastWhiteSpace) {\n        canClose = false;\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          canClose = false;\n        }\n      }\n      if (nextChar === 0x22 /* \" */ && t[0] === '\"') {\n        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {\n          // special case: 1\"\" - count first quote as an inch\n          canClose = canOpen = false;\n        }\n      }\n      if (canOpen && canClose) {\n        // Replace quotes in the middle of punctuation sequence, but not\n        // in the middle of the words, i.e.:\n        //\n        // 1. foo \" bar \" baz - not replaced\n        // 2. foo-\"-bar-\"-baz - replaced\n        // 3. foo\"bar\"baz     - not replaced\n        //\n        canOpen = isLastPunctChar;\n        canClose = isNextPunctChar;\n      }\n      if (!canOpen && !canClose) {\n        // middle of word\n        if (isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE);\n        }\n        continue;\n      }\n      if (canClose) {\n        // this could be a closing quote, rewind the stack to get a match\n        for (j = stack.length - 1; j >= 0; j--) {\n          let item = stack[j];\n          if (stack[j].level < thisLevel) {\n            break;\n          }\n          if (item.single === isSingle && stack[j].level === thisLevel) {\n            item = stack[j];\n            let openQuote;\n            let closeQuote;\n            if (isSingle) {\n              openQuote = state.md.options.quotes[2];\n              closeQuote = state.md.options.quotes[3];\n            } else {\n              openQuote = state.md.options.quotes[0];\n              closeQuote = state.md.options.quotes[1];\n            }\n\n            // replace token.content *before* tokens[item.token].content,\n            // because, if they are pointing at the same token, replaceAt\n            // could mess up indices when quote length != 1\n            token.content = replaceAt(token.content, t.index, closeQuote);\n            tokens[item.token].content = replaceAt(tokens[item.token].content, item.pos, openQuote);\n            pos += closeQuote.length - 1;\n            if (item.token === i) {\n              pos += openQuote.length - 1;\n            }\n            text = token.content;\n            max = text.length;\n            stack.length = j;\n            continue OUTER;\n          }\n        }\n      }\n      if (canOpen) {\n        stack.push({\n          token: i,\n          pos: t.index,\n          single: isSingle,\n          level: thisLevel\n        });\n      } else if (canClose && isSingle) {\n        token.content = replaceAt(token.content, t.index, APOSTROPHE);\n      }\n    }\n  }\n}\nfunction smartquotes(state) {\n  /* eslint max-depth:0 */\n  if (!state.md.options.typographer) {\n    return;\n  }\n  for (let blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline' || !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n      continue;\n    }\n    process_inlines(state.tokens[blkIdx].children, state);\n  }\n}\n\n// Join raw text tokens with the rest of the text\n//\n// This is set as a separate rule to provide an opportunity for plugins\n// to run text replacements after text join, but before escape join.\n//\n// For example, `\\:)` shouldn't be replaced with an emoji.\n//\n\nfunction text_join(state) {\n  let curr, last;\n  const blockTokens = state.tokens;\n  const l = blockTokens.length;\n  for (let j = 0; j < l; j++) {\n    if (blockTokens[j].type !== 'inline') continue;\n    const tokens = blockTokens[j].children;\n    const max = tokens.length;\n    for (curr = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text_special') {\n        tokens[curr].type = 'text';\n      }\n    }\n    for (curr = last = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text' && curr + 1 < max && tokens[curr + 1].type === 'text') {\n        // collapse two adjacent text nodes\n        tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n      } else {\n        if (curr !== last) {\n          tokens[last] = tokens[curr];\n        }\n        last++;\n      }\n    }\n    if (curr !== last) {\n      tokens.length = last;\n    }\n  }\n}\n\n/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n\nconst _rules$2 = [['normalize', normalize], ['block', block], ['inline', inline], ['linkify', linkify$1], ['replacements', replace], ['smartquotes', smartquotes],\n// `text_join` finds `text_special` tokens (for escape sequences)\n// and joins them with the rest of the text\n['text_join', text_join]];\n\n/**\n * new Core()\n **/\nfunction Core() {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler();\n  for (let i = 0; i < _rules$2.length; i++) {\n    this.ruler.push(_rules$2[i][0], _rules$2[i][1]);\n  }\n}\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  const rules = this.ruler.getRules('');\n  for (let i = 0, l = rules.length; i < l; i++) {\n    rules[i](state);\n  }\n};\nCore.prototype.State = StateCore;\n\n// Parser state class\n\nfunction StateBlock(src, md, env, tokens) {\n  this.src = src;\n\n  // link to parser instance\n  this.md = md;\n  this.env = env;\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens;\n  this.bMarks = []; // line begin offsets for fast jumps\n  this.eMarks = []; // line end offsets for fast jumps\n  this.tShift = []; // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = []; // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = [];\n\n  // block parser variables\n\n  // required block content indent (for example, if we are\n  // inside a list, it would be positioned after list marker)\n  this.blkIndent = 0;\n  this.line = 0; // line index in src\n  this.lineMax = 0; // lines count\n  this.tight = false; // loose/tight mode for lists\n  this.ddIndent = -1; // indent of the current dd block (-1 if there isn't any)\n  this.listIndent = -1; // indent of the current list block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root';\n  this.level = 0;\n\n  // Create caches\n  // Generate markers.\n  const s = this.src;\n  for (let start = 0, pos = 0, indent = 0, offset = 0, len = s.length, indent_found = false; pos < len; pos++) {\n    const ch = s.charCodeAt(pos);\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++;\n        if (ch === 0x09) {\n          offset += 4 - offset % 4;\n        } else {\n          offset++;\n        }\n        continue;\n      } else {\n        indent_found = true;\n      }\n    }\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) {\n        pos++;\n      }\n      this.bMarks.push(start);\n      this.eMarks.push(pos);\n      this.tShift.push(indent);\n      this.sCount.push(offset);\n      this.bsCount.push(0);\n      indent_found = false;\n      indent = 0;\n      offset = 0;\n      start = pos + 1;\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length);\n  this.eMarks.push(s.length);\n  this.tShift.push(0);\n  this.sCount.push(0);\n  this.bsCount.push(0);\n  this.lineMax = this.bMarks.length - 1; // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  const token = new Token(type, tag, nesting);\n  token.block = true;\n  if (nesting < 0) this.level--; // closing tag\n  token.level = this.level;\n  if (nesting > 0) this.level++; // opening tag\n\n  this.tokens.push(token);\n  return token;\n};\nStateBlock.prototype.isEmpty = function isEmpty(line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n};\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n  for (let max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break;\n    }\n  }\n  return from;\n};\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n  for (let max = this.src.length; pos < max; pos++) {\n    const ch = this.src.charCodeAt(pos);\n    if (!isSpace(ch)) {\n      break;\n    }\n  }\n  return pos;\n};\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n  if (pos <= min) {\n    return pos;\n  }\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) {\n      return pos + 1;\n    }\n  }\n  return pos;\n};\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars(pos, code) {\n  for (let max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) {\n      break;\n    }\n  }\n  return pos;\n};\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n  if (pos <= min) {\n    return pos;\n  }\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) {\n      return pos + 1;\n    }\n  }\n  return pos;\n};\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n  if (begin >= end) {\n    return '';\n  }\n  const queue = new Array(end - begin);\n  for (let i = 0, line = begin; line < end; line++, i++) {\n    let lineIndent = 0;\n    const lineStart = this.bMarks[line];\n    let first = lineStart;\n    let last;\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1;\n    } else {\n      last = this.eMarks[line];\n    }\n    while (first < last && lineIndent < indent) {\n      const ch = this.src.charCodeAt(first);\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n        } else {\n          lineIndent++;\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++;\n      } else {\n        break;\n      }\n      first++;\n    }\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);\n    } else {\n      queue[i] = this.src.slice(first, last);\n    }\n  }\n  return queue.join('');\n};\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token;\n\n// GFM table, https://github.github.com/gfm/#tables-extension-\n\nfunction getLine(state, line) {\n  const pos = state.bMarks[line] + state.tShift[line];\n  const max = state.eMarks[line];\n  return state.src.slice(pos, max);\n}\nfunction escapedSplit(str) {\n  const result = [];\n  const max = str.length;\n  let pos = 0;\n  let ch = str.charCodeAt(pos);\n  let isEscaped = false;\n  let lastPos = 0;\n  let current = '';\n  while (pos < max) {\n    if (ch === 0x7c /* | */) {\n      if (!isEscaped) {\n        // pipe separating cells, '|'\n        result.push(current + str.substring(lastPos, pos));\n        current = '';\n        lastPos = pos + 1;\n      } else {\n        // escaped pipe, '\\|'\n        current += str.substring(lastPos, pos - 1);\n        lastPos = pos;\n      }\n    }\n    isEscaped = ch === 0x5c /* \\ */;\n    pos++;\n    ch = str.charCodeAt(pos);\n  }\n  result.push(current + str.substring(lastPos));\n  return result;\n}\nfunction table(state, startLine, endLine, silent) {\n  // should have at least two lines\n  if (startLine + 2 > endLine) {\n    return false;\n  }\n  let nextLine = startLine + 1;\n  if (state.sCount[nextLine] < state.blkIndent) {\n    return false;\n  }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) {\n    return false;\n  }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  let pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) {\n    return false;\n  }\n  const firstCh = state.src.charCodeAt(pos++);\n  if (firstCh !== 0x7C /* | */ && firstCh !== 0x2D /* - */ && firstCh !== 0x3A /* : */) {\n    return false;\n  }\n  if (pos >= state.eMarks[nextLine]) {\n    return false;\n  }\n  const secondCh = state.src.charCodeAt(pos++);\n  if (secondCh !== 0x7C /* | */ && secondCh !== 0x2D /* - */ && secondCh !== 0x3A /* : */ && !isSpace(secondCh)) {\n    return false;\n  }\n\n  // if first character is '-', then second character must not be a space\n  // (due to parsing ambiguity with list)\n  if (firstCh === 0x2D /* - */ && isSpace(secondCh)) {\n    return false;\n  }\n  while (pos < state.eMarks[nextLine]) {\n    const ch = state.src.charCodeAt(pos);\n    if (ch !== 0x7C /* | */ && ch !== 0x2D /* - */ && ch !== 0x3A /* : */ && !isSpace(ch)) {\n      return false;\n    }\n    pos++;\n  }\n  let lineText = getLine(state, startLine + 1);\n  let columns = lineText.split('|');\n  const aligns = [];\n  for (let i = 0; i < columns.length; i++) {\n    const t = columns[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n    if (!/^:?-+:?$/.test(t)) {\n      return false;\n    }\n    if (t.charCodeAt(t.length - 1) === 0x3A /* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A /* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A /* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) {\n    return false;\n  }\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  columns = escapedSplit(lineText);\n  if (columns.length && columns[0] === '') columns.shift();\n  if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n  // header row will define an amount of columns in the entire table,\n  // and align row should be exactly the same (the rest of the rows can differ)\n  const columnCount = columns.length;\n  if (columnCount === 0 || columnCount !== aligns.length) {\n    return false;\n  }\n  if (silent) {\n    return true;\n  }\n  const oldParentType = state.parentType;\n  state.parentType = 'table';\n\n  // use 'blockquote' lists for termination because it's\n  // the most similar to tables\n  const terminatorRules = state.md.block.ruler.getRules('blockquote');\n  const token_to = state.push('table_open', 'table', 1);\n  const tableLines = [startLine, 0];\n  token_to.map = tableLines;\n  const token_tho = state.push('thead_open', 'thead', 1);\n  token_tho.map = [startLine, startLine + 1];\n  const token_htro = state.push('tr_open', 'tr', 1);\n  token_htro.map = [startLine, startLine + 1];\n  for (let i = 0; i < columns.length; i++) {\n    const token_ho = state.push('th_open', 'th', 1);\n    if (aligns[i]) {\n      token_ho.attrs = [['style', 'text-align:' + aligns[i]]];\n    }\n    const token_il = state.push('inline', '', 0);\n    token_il.content = columns[i].trim();\n    token_il.children = [];\n    state.push('th_close', 'th', -1);\n  }\n  state.push('tr_close', 'tr', -1);\n  state.push('thead_close', 'thead', -1);\n  let tbodyLines;\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) {\n      break;\n    }\n    let terminate = false;\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) {\n      break;\n    }\n    lineText = getLine(state, nextLine).trim();\n    if (!lineText) {\n      break;\n    }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      break;\n    }\n    columns = escapedSplit(lineText);\n    if (columns.length && columns[0] === '') columns.shift();\n    if (columns.length && columns[columns.length - 1] === '') columns.pop();\n    if (nextLine === startLine + 2) {\n      const token_tbo = state.push('tbody_open', 'tbody', 1);\n      token_tbo.map = tbodyLines = [startLine + 2, 0];\n    }\n    const token_tro = state.push('tr_open', 'tr', 1);\n    token_tro.map = [nextLine, nextLine + 1];\n    for (let i = 0; i < columnCount; i++) {\n      const token_tdo = state.push('td_open', 'td', 1);\n      if (aligns[i]) {\n        token_tdo.attrs = [['style', 'text-align:' + aligns[i]]];\n      }\n      const token_il = state.push('inline', '', 0);\n      token_il.content = columns[i] ? columns[i].trim() : '';\n      token_il.children = [];\n      state.push('td_close', 'td', -1);\n    }\n    state.push('tr_close', 'tr', -1);\n  }\n  if (tbodyLines) {\n    state.push('tbody_close', 'tbody', -1);\n    tbodyLines[1] = nextLine;\n  }\n  state.push('table_close', 'table', -1);\n  tableLines[1] = nextLine;\n  state.parentType = oldParentType;\n  state.line = nextLine;\n  return true;\n}\n\n// Code block (4 spaces padded)\n\nfunction code(state, startLine, endLine /*, silent */) {\n  if (state.sCount[startLine] - state.blkIndent < 4) {\n    return false;\n  }\n  let nextLine = startLine + 1;\n  let last = nextLine;\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      continue;\n    }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++;\n      last = nextLine;\n      continue;\n    }\n    break;\n  }\n  state.line = last;\n  const token = state.push('code_block', 'code', 0);\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\\n';\n  token.map = [startLine, state.line];\n  return true;\n}\n\n// fences (``` lang, ~~~ lang)\n\nfunction fence(state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  let max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  if (pos + 3 > max) {\n    return false;\n  }\n  const marker = state.src.charCodeAt(pos);\n  if (marker !== 0x7E /* ~ */ && marker !== 0x60 /* ` */) {\n    return false;\n  }\n\n  // scan marker length\n  let mem = pos;\n  pos = state.skipChars(pos, marker);\n  let len = pos - mem;\n  if (len < 3) {\n    return false;\n  }\n  const markup = state.src.slice(mem, pos);\n  const params = state.src.slice(pos, max);\n  if (marker === 0x60 /* ` */) {\n    if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n      return false;\n    }\n  }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) {\n    return true;\n  }\n\n  // search end of block\n  let nextLine = startLine;\n  let haveEndMarker = false;\n  for (;;) {\n    nextLine++;\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break;\n    }\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break;\n    }\n    if (state.src.charCodeAt(pos) !== marker) {\n      continue;\n    }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue;\n    }\n    pos = state.skipChars(pos, marker);\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) {\n      continue;\n    }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos);\n    if (pos < max) {\n      continue;\n    }\n    haveEndMarker = true;\n    // found!\n    break;\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine];\n  state.line = nextLine + (haveEndMarker ? 1 : 0);\n  const token = state.push('fence', 'code', 0);\n  token.info = params;\n  token.content = state.getLines(startLine + 1, nextLine, len, true);\n  token.markup = markup;\n  token.map = [startLine, state.line];\n  return true;\n}\n\n// Block quotes\n\nfunction blockquote(state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  let max = state.eMarks[startLine];\n  const oldLineMax = state.lineMax;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos) !== 0x3E /* > */) {\n    return false;\n  }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) {\n    return true;\n  }\n  const oldBMarks = [];\n  const oldBSCount = [];\n  const oldSCount = [];\n  const oldTShift = [];\n  const terminatorRules = state.md.block.ruler.getRules('blockquote');\n  const oldParentType = state.parentType;\n  state.parentType = 'blockquote';\n  let lastLineEmpty = false;\n  let nextLine;\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag:\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine; nextLine < endLine; nextLine++) {\n    // check if it's outdented, i.e. it's inside list item and indented\n    // less than said list item:\n    //\n    // ```\n    // 1. anything\n    //    > current blockquote\n    // 2. checking this line\n    // ```\n    const isOutdented = state.sCount[nextLine] < state.blkIndent;\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break;\n    }\n    if (state.src.charCodeAt(pos++) === 0x3E /* > */ && !isOutdented) {\n      // This line is inside the blockquote.\n\n      // set offset past spaces and \">\"\n      let initial = state.sCount[nextLine] + 1;\n      let spaceAfterMarker;\n      let adjustTab;\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n        // ' >   test '\n        //     ^ -- position start of line here:\n        pos++;\n        initial++;\n        adjustTab = false;\n        spaceAfterMarker = true;\n      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n        spaceAfterMarker = true;\n        if ((state.bsCount[nextLine] + initial) % 4 === 3) {\n          // '  >\\t  test '\n          //       ^ -- position start of line here (tab has width===1)\n          pos++;\n          initial++;\n          adjustTab = false;\n        } else {\n          // ' >\\t  test '\n          //    ^ -- position start of line here + shift bsCount slightly\n          //         to make extra space appear\n          adjustTab = true;\n        }\n      } else {\n        spaceAfterMarker = false;\n      }\n      let offset = initial;\n      oldBMarks.push(state.bMarks[nextLine]);\n      state.bMarks[nextLine] = pos;\n      while (pos < max) {\n        const ch = state.src.charCodeAt(pos);\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n          } else {\n            offset++;\n          }\n        } else {\n          break;\n        }\n        pos++;\n      }\n      lastLineEmpty = pos >= max;\n      oldBSCount.push(state.bsCount[nextLine]);\n      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n      oldSCount.push(state.sCount[nextLine]);\n      state.sCount[nextLine] = offset - initial;\n      oldTShift.push(state.tShift[nextLine]);\n      state.tShift[nextLine] = pos - state.bMarks[nextLine];\n      continue;\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) {\n      break;\n    }\n\n    // Case 3: another tag found.\n    let terminate = false;\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) {\n      // Quirk to enforce \"hard termination mode\" for paragraphs;\n      // normally if you call `tokenize(state, startLine, nextLine)`,\n      // paragraphs will look below nextLine for paragraph continuation,\n      // but if blockquote is terminated by another tag, they shouldn't\n      state.lineMax = nextLine;\n      if (state.blkIndent !== 0) {\n        // state.blkIndent was non-zero, we now set it to zero,\n        // so we need to re-calculate all offsets to appear as\n        // if indent wasn't changed\n        oldBMarks.push(state.bMarks[nextLine]);\n        oldBSCount.push(state.bsCount[nextLine]);\n        oldTShift.push(state.tShift[nextLine]);\n        oldSCount.push(state.sCount[nextLine]);\n        state.sCount[nextLine] -= state.blkIndent;\n      }\n      break;\n    }\n    oldBMarks.push(state.bMarks[nextLine]);\n    oldBSCount.push(state.bsCount[nextLine]);\n    oldTShift.push(state.tShift[nextLine]);\n    oldSCount.push(state.sCount[nextLine]);\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1;\n  }\n  const oldIndent = state.blkIndent;\n  state.blkIndent = 0;\n  const token_o = state.push('blockquote_open', 'blockquote', 1);\n  token_o.markup = '>';\n  const lines = [startLine, 0];\n  token_o.map = lines;\n  state.md.block.tokenize(state, startLine, nextLine);\n  const token_c = state.push('blockquote_close', 'blockquote', -1);\n  token_c.markup = '>';\n  state.lineMax = oldLineMax;\n  state.parentType = oldParentType;\n  lines[1] = state.line;\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (let i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i];\n    state.tShift[i + startLine] = oldTShift[i];\n    state.sCount[i + startLine] = oldSCount[i];\n    state.bsCount[i + startLine] = oldBSCount[i];\n  }\n  state.blkIndent = oldIndent;\n  return true;\n}\n\n// Horizontal rule\n\nfunction hr(state, startLine, endLine, silent) {\n  const max = state.eMarks[startLine];\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  const marker = state.src.charCodeAt(pos++);\n\n  // Check hr marker\n  if (marker !== 0x2A /* * */ && marker !== 0x2D /* - */ && marker !== 0x5F /* _ */) {\n    return false;\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  let cnt = 1;\n  while (pos < max) {\n    const ch = state.src.charCodeAt(pos++);\n    if (ch !== marker && !isSpace(ch)) {\n      return false;\n    }\n    if (ch === marker) {\n      cnt++;\n    }\n  }\n  if (cnt < 3) {\n    return false;\n  }\n  if (silent) {\n    return true;\n  }\n  state.line = startLine + 1;\n  const token = state.push('hr', 'hr', 0);\n  token.map = [startLine, state.line];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n  return true;\n}\n\n// Lists\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker(state, startLine) {\n  const max = state.eMarks[startLine];\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  const marker = state.src.charCodeAt(pos++);\n  // Check bullet\n  if (marker !== 0x2A /* * */ && marker !== 0x2D /* - */ && marker !== 0x2B /* + */) {\n    return -1;\n  }\n  if (pos < max) {\n    const ch = state.src.charCodeAt(pos);\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1;\n    }\n  }\n  return pos;\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker(state, startLine) {\n  const start = state.bMarks[startLine] + state.tShift[startLine];\n  const max = state.eMarks[startLine];\n  let pos = start;\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) {\n    return -1;\n  }\n  let ch = state.src.charCodeAt(pos++);\n  if (ch < 0x30 /* 0 */ || ch > 0x39 /* 9 */) {\n    return -1;\n  }\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) {\n      return -1;\n    }\n    ch = state.src.charCodeAt(pos++);\n    if (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) {\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) {\n        return -1;\n      }\n      continue;\n    }\n\n    // found valid marker\n    if (ch === 0x29 /* ) */ || ch === 0x2e /* . */) {\n      break;\n    }\n    return -1;\n  }\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1;\n    }\n  }\n  return pos;\n}\nfunction markTightParagraphs(state, idx) {\n  const level = state.level + 2;\n  for (let i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true;\n      state.tokens[i].hidden = true;\n      i += 2;\n    }\n  }\n}\nfunction list(state, startLine, endLine, silent) {\n  let max, pos, start, token;\n  let nextLine = startLine;\n  let tight = true;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) {\n    return false;\n  }\n\n  // Special case:\n  //  - item 1\n  //   - item 2\n  //    - item 3\n  //     - item 4\n  //      - this one is a paragraph continuation\n  if (state.listIndent >= 0 && state.sCount[nextLine] - state.listIndent >= 4 && state.sCount[nextLine] < state.blkIndent) {\n    return false;\n  }\n  let isTerminatingParagraph = false;\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      isTerminatingParagraph = true;\n    }\n  }\n\n  // Detect list type and position after marker\n  let isOrdered;\n  let markerValue;\n  let posAfterMarker;\n  if ((posAfterMarker = skipOrderedListMarker(state, nextLine)) >= 0) {\n    isOrdered = true;\n    start = state.bMarks[nextLine] + state.tShift[nextLine];\n    markerValue = Number(state.src.slice(start, posAfterMarker - 1));\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false;\n  } else if ((posAfterMarker = skipBulletListMarker(state, nextLine)) >= 0) {\n    isOrdered = false;\n  } else {\n    return false;\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[nextLine]) return false;\n  }\n\n  // For validation mode we can terminate immediately\n  if (silent) {\n    return true;\n  }\n\n  // We should terminate list on style change. Remember first one to compare.\n  const markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n\n  // Start list\n  const listTokIdx = state.tokens.length;\n  if (isOrdered) {\n    token = state.push('ordered_list_open', 'ol', 1);\n    if (markerValue !== 1) {\n      token.attrs = [['start', markerValue]];\n    }\n  } else {\n    token = state.push('bullet_list_open', 'ul', 1);\n  }\n  const listLines = [nextLine, 0];\n  token.map = listLines;\n  token.markup = String.fromCharCode(markerCharCode);\n\n  //\n  // Iterate list items\n  //\n\n  let prevEmptyEnd = false;\n  const terminatorRules = state.md.block.ruler.getRules('list');\n  const oldParentType = state.parentType;\n  state.parentType = 'list';\n  while (nextLine < endLine) {\n    pos = posAfterMarker;\n    max = state.eMarks[nextLine];\n    const initial = state.sCount[nextLine] + posAfterMarker - (state.bMarks[nextLine] + state.tShift[nextLine]);\n    let offset = initial;\n    while (pos < max) {\n      const ch = state.src.charCodeAt(pos);\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n      } else if (ch === 0x20) {\n        offset++;\n      } else {\n        break;\n      }\n      pos++;\n    }\n    const contentStart = pos;\n    let indentAfterMarker;\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1;\n    } else {\n      indentAfterMarker = offset - initial;\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) {\n      indentAfterMarker = 1;\n    }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    const indent = initial + indentAfterMarker;\n\n    // Run subparser & write tokens\n    token = state.push('list_item_open', 'li', 1);\n    token.markup = String.fromCharCode(markerCharCode);\n    const itemLines = [nextLine, 0];\n    token.map = itemLines;\n    if (isOrdered) {\n      token.info = state.src.slice(start, posAfterMarker - 1);\n    }\n\n    // change current state, then restore it after parser subcall\n    const oldTight = state.tight;\n    const oldTShift = state.tShift[nextLine];\n    const oldSCount = state.sCount[nextLine];\n\n    //  - example list\n    // ^ listIndent position will be here\n    //   ^ blkIndent position will be here\n    //\n    const oldListIndent = state.listIndent;\n    state.listIndent = state.blkIndent;\n    state.blkIndent = indent;\n    state.tight = true;\n    state.tShift[nextLine] = contentStart - state.bMarks[nextLine];\n    state.sCount[nextLine] = offset;\n    if (contentStart >= max && state.isEmpty(nextLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine);\n    } else {\n      state.md.block.tokenize(state, nextLine, endLine, true);\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false;\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = state.line - nextLine > 1 && state.isEmpty(state.line - 1);\n    state.blkIndent = state.listIndent;\n    state.listIndent = oldListIndent;\n    state.tShift[nextLine] = oldTShift;\n    state.sCount[nextLine] = oldSCount;\n    state.tight = oldTight;\n    token = state.push('list_item_close', 'li', -1);\n    token.markup = String.fromCharCode(markerCharCode);\n    nextLine = state.line;\n    itemLines[1] = nextLine;\n    if (nextLine >= endLine) {\n      break;\n    }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) {\n      break;\n    }\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      break;\n    }\n\n    // fail if terminating block found\n    let terminate = false;\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) {\n      break;\n    }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine);\n      if (posAfterMarker < 0) {\n        break;\n      }\n      start = state.bMarks[nextLine] + state.tShift[nextLine];\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine);\n      if (posAfterMarker < 0) {\n        break;\n      }\n    }\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {\n      break;\n    }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1);\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1);\n  }\n  token.markup = String.fromCharCode(markerCharCode);\n  listLines[1] = nextLine;\n  state.line = nextLine;\n  state.parentType = oldParentType;\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx);\n  }\n  return true;\n}\nfunction reference(state, startLine, _endLine, silent) {\n  let lines = 0;\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  let max = state.eMarks[startLine];\n  let nextLine = startLine + 1;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  if (state.src.charCodeAt(pos) !== 0x5B /* [ */) {\n    return false;\n  }\n\n  // Simple check to quickly interrupt scan on [link](url) at the start of line.\n  // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54\n  while (++pos < max) {\n    if (state.src.charCodeAt(pos) === 0x5D /* ] */ && state.src.charCodeAt(pos - 1) !== 0x5C /* \\ */) {\n      if (pos + 1 === max) {\n        return false;\n      }\n      if (state.src.charCodeAt(pos + 1) !== 0x3A /* : */) {\n        return false;\n      }\n      break;\n    }\n  }\n  const endLine = state.lineMax;\n\n  // jump line-by-line until empty one or EOF\n  const terminatorRules = state.md.block.ruler.getRules('reference');\n  const oldParentType = state.parentType;\n  state.parentType = 'reference';\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) {\n      continue;\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) {\n      continue;\n    }\n\n    // Some tags can terminate paragraph without empty line.\n    let terminate = false;\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) {\n      break;\n    }\n  }\n  const str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  max = str.length;\n  let labelEnd = -1;\n  for (pos = 1; pos < max; pos++) {\n    const ch = str.charCodeAt(pos);\n    if (ch === 0x5B /* [ */) {\n      return false;\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos;\n      break;\n    } else if (ch === 0x0A /* \\n */) {\n      lines++;\n    } else if (ch === 0x5C /* \\ */) {\n      pos++;\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n  }\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A /* : */) {\n    return false;\n  }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    const ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) ;else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  const destRes = state.md.helpers.parseLinkDestination(str, pos, max);\n  if (!destRes.ok) {\n    return false;\n  }\n  const href = state.md.normalizeLink(destRes.str);\n  if (!state.md.validateLink(href)) {\n    return false;\n  }\n  pos = destRes.pos;\n  lines += destRes.lines;\n\n  // save cursor state, we could require to rollback later\n  const destEndPos = pos;\n  const destEndLineNo = lines;\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  const start = pos;\n  for (; pos < max; pos++) {\n    const ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) ;else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  const titleRes = state.md.helpers.parseLinkTitle(str, pos, max);\n  let title;\n  if (pos < max && start !== pos && titleRes.ok) {\n    title = titleRes.str;\n    pos = titleRes.pos;\n    lines += titleRes.lines;\n  } else {\n    title = '';\n    pos = destEndPos;\n    lines = destEndLineNo;\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    const ch = str.charCodeAt(pos);\n    if (!isSpace(ch)) {\n      break;\n    }\n    pos++;\n  }\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = '';\n      pos = destEndPos;\n      lines = destEndLineNo;\n      while (pos < max) {\n        const ch = str.charCodeAt(pos);\n        if (!isSpace(ch)) {\n          break;\n        }\n        pos++;\n      }\n    }\n  }\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false;\n  }\n  const label = normalizeReference(str.slice(1, labelEnd));\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false;\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /* istanbul ignore if */\n  if (silent) {\n    return true;\n  }\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {};\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = {\n      title,\n      href\n    };\n  }\n  state.parentType = oldParentType;\n  state.line = startLine + lines + 1;\n  return true;\n}\n\n// List of valid html blocks names, according to commonmark spec\n// https://spec.commonmark.org/0.30/#html-blocks\n\nvar block_names = ['address', 'article', 'aside', 'base', 'basefont', 'blockquote', 'body', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dialog', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hr', 'html', 'iframe', 'legend', 'li', 'link', 'main', 'menu', 'menuitem', 'nav', 'noframes', 'ol', 'optgroup', 'option', 'p', 'param', 'section', 'source', 'summary', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul'];\n\n// Regexps to match html elements\n\nconst attr_name = '[a-zA-Z_:][a-zA-Z0-9:._-]*';\nconst unquoted = '[^\"\\'=<>`\\\\x00-\\\\x20]+';\nconst single_quoted = \"'[^']*'\";\nconst double_quoted = '\"[^\"]*\"';\nconst attr_value = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';\nconst attribute = '(?:\\\\s+' + attr_name + '(?:\\\\s*=\\\\s*' + attr_value + ')?)';\nconst open_tag = '<[A-Za-z][A-Za-z0-9\\\\-]*' + attribute + '*\\\\s*\\\\/?>';\nconst close_tag = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>';\nconst comment = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';\nconst processing = '<[?][\\\\s\\\\S]*?[?]>';\nconst declaration = '<![A-Z]+\\\\s+[^>]*>';\nconst cdata = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>';\nconst HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment + '|' + processing + '|' + declaration + '|' + cdata + ')');\nconst HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');\n\n// HTML block\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nconst HTML_SEQUENCES = [[/^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true], [/^<!--/, /-->/, true], [/^<\\?/, /\\?>/, true], [/^<![A-Z]/, />/, true], [/^<!\\[CDATA\\[/, /\\]\\]>/, true], [new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true], [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'), /^$/, false]];\nfunction html_block(state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  let max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  if (!state.md.options.html) {\n    return false;\n  }\n  if (state.src.charCodeAt(pos) !== 0x3C /* < */) {\n    return false;\n  }\n  let lineText = state.src.slice(pos, max);\n  let i = 0;\n  for (; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) {\n      break;\n    }\n  }\n  if (i === HTML_SEQUENCES.length) {\n    return false;\n  }\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2];\n  }\n  let nextLine = startLine + 1;\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) {\n        break;\n      }\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      lineText = state.src.slice(pos, max);\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) {\n          nextLine++;\n        }\n        break;\n      }\n    }\n  }\n  state.line = nextLine;\n  const token = state.push('html_block', '', 0);\n  token.map = [startLine, nextLine];\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n  return true;\n}\n\n// heading (#, ##, ...)\n\nfunction heading(state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  let max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  let ch = state.src.charCodeAt(pos);\n  if (ch !== 0x23 /* # */ || pos >= max) {\n    return false;\n  }\n\n  // count heading level\n  let level = 1;\n  ch = state.src.charCodeAt(++pos);\n  while (ch === 0x23 /* # */ && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n  if (level > 6 || pos < max && !isSpace(ch)) {\n    return false;\n  }\n  if (silent) {\n    return true;\n  }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos);\n  const tmp = state.skipCharsBack(max, 0x23, pos); // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp;\n  }\n  state.line = startLine + 1;\n  const token_o = state.push('heading_open', 'h' + String(level), 1);\n  token_o.markup = '########'.slice(0, level);\n  token_o.map = [startLine, state.line];\n  const token_i = state.push('inline', '', 0);\n  token_i.content = state.src.slice(pos, max).trim();\n  token_i.map = [startLine, state.line];\n  token_i.children = [];\n  const token_c = state.push('heading_close', 'h' + String(level), -1);\n  token_c.markup = '########'.slice(0, level);\n  return true;\n}\n\n// lheading (---, ===)\n\nfunction lheading(state, startLine, endLine /*, silent */) {\n  const terminatorRules = state.md.block.ruler.getRules('paragraph');\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  const oldParentType = state.parentType;\n  state.parentType = 'paragraph'; // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  let level = 0;\n  let marker;\n  let nextLine = startLine + 1;\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) {\n      continue;\n    }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      let pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      const max = state.eMarks[nextLine];\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos);\n        if (marker === 0x2D /* - */ || marker === 0x3D /* = */) {\n          pos = state.skipChars(pos, marker);\n          pos = state.skipSpaces(pos);\n          if (pos >= max) {\n            level = marker === 0x3D /* = */ ? 1 : 2;\n            break;\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) {\n      continue;\n    }\n\n    // Some tags can terminate paragraph without empty line.\n    let terminate = false;\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) {\n      break;\n    }\n  }\n  if (!level) {\n    // Didn't find valid underline\n    return false;\n  }\n  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  state.line = nextLine + 1;\n  const token_o = state.push('heading_open', 'h' + String(level), 1);\n  token_o.markup = String.fromCharCode(marker);\n  token_o.map = [startLine, state.line];\n  const token_i = state.push('inline', '', 0);\n  token_i.content = content;\n  token_i.map = [startLine, state.line - 1];\n  token_i.children = [];\n  const token_c = state.push('heading_close', 'h' + String(level), -1);\n  token_c.markup = String.fromCharCode(marker);\n  state.parentType = oldParentType;\n  return true;\n}\n\n// Paragraph\n\nfunction paragraph(state, startLine, endLine) {\n  const terminatorRules = state.md.block.ruler.getRules('paragraph');\n  const oldParentType = state.parentType;\n  let nextLine = startLine + 1;\n  state.parentType = 'paragraph';\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) {\n      continue;\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) {\n      continue;\n    }\n\n    // Some tags can terminate paragraph without empty line.\n    let terminate = false;\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) {\n      break;\n    }\n  }\n  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  state.line = nextLine;\n  const token_o = state.push('paragraph_open', 'p', 1);\n  token_o.map = [startLine, state.line];\n  const token_i = state.push('inline', '', 0);\n  token_i.content = content;\n  token_i.map = [startLine, state.line];\n  token_i.children = [];\n  state.push('paragraph_close', 'p', -1);\n  state.parentType = oldParentType;\n  return true;\n}\n\n/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n\nconst _rules$1 = [\n// First 2 params - rule name & source. Secondary array - list of rules,\n// which can be terminated by this one.\n['table', table, ['paragraph', 'reference']], ['code', code], ['fence', fence, ['paragraph', 'reference', 'blockquote', 'list']], ['blockquote', blockquote, ['paragraph', 'reference', 'blockquote', 'list']], ['hr', hr, ['paragraph', 'reference', 'blockquote', 'list']], ['list', list, ['paragraph', 'reference', 'blockquote']], ['reference', reference], ['html_block', html_block, ['paragraph', 'reference', 'blockquote']], ['heading', heading, ['paragraph', 'reference', 'blockquote']], ['lheading', lheading], ['paragraph', paragraph]];\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock() {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler();\n  for (let i = 0; i < _rules$1.length; i++) {\n    this.ruler.push(_rules$1[i][0], _rules$1[i][1], {\n      alt: (_rules$1[i][2] || []).slice()\n    });\n  }\n}\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  const rules = this.ruler.getRules('');\n  const len = rules.length;\n  const maxNesting = state.md.options.maxNesting;\n  let line = startLine;\n  let hasEmptyLines = false;\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line);\n    if (line >= endLine) {\n      break;\n    }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) {\n      break;\n    }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine;\n      break;\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n    const prevLine = state.line;\n    let ok = false;\n    for (let i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false);\n      if (ok) {\n        if (prevLine >= state.line) {\n          throw new Error(\"block rule didn't increment state.line\");\n        }\n        break;\n      }\n    }\n\n    // this can only happen if user disables paragraph rule\n    if (!ok) throw new Error('none of the block rules matched');\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines;\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true;\n    }\n    line = state.line;\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true;\n      line++;\n      state.line = line;\n    }\n  }\n};\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  if (!src) {\n    return;\n  }\n  const state = new this.State(src, md, env, outTokens);\n  this.tokenize(state, state.line, state.lineMax);\n};\nParserBlock.prototype.State = StateBlock;\n\n// Inline parser state\n\nfunction StateInline(src, md, env, outTokens) {\n  this.src = src;\n  this.env = env;\n  this.md = md;\n  this.tokens = outTokens;\n  this.tokens_meta = Array(outTokens.length);\n  this.pos = 0;\n  this.posMax = this.src.length;\n  this.level = 0;\n  this.pending = '';\n  this.pendingLevel = 0;\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {};\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = [];\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = [];\n\n  // backtick length => last seen position\n  this.backticks = {};\n  this.backticksScanned = false;\n\n  // Counter used to disable inline linkify-it execution\n  // inside <a> and markdown links\n  this.linkLevel = 0;\n}\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  const token = new Token('text', '', 0);\n  token.content = this.pending;\n  token.level = this.pendingLevel;\n  this.tokens.push(token);\n  this.pending = '';\n  return token;\n};\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending();\n  }\n  const token = new Token(type, tag, nesting);\n  let token_meta = null;\n  if (nesting < 0) {\n    // closing tag\n    this.level--;\n    this.delimiters = this._prev_delimiters.pop();\n  }\n  token.level = this.level;\n  if (nesting > 0) {\n    // opening tag\n    this.level++;\n    this._prev_delimiters.push(this.delimiters);\n    this.delimiters = [];\n    token_meta = {\n      delimiters: this.delimiters\n    };\n  }\n  this.pendingLevel = this.level;\n  this.tokens.push(token);\n  this.tokens_meta.push(token_meta);\n  return token;\n};\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  let can_open, can_close;\n  let left_flanking = true;\n  let right_flanking = true;\n  const max = this.posMax;\n  const marker = this.src.charCodeAt(start);\n\n  // treat beginning of the line as a whitespace\n  const lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n  let pos = start;\n  while (pos < max && this.src.charCodeAt(pos) === marker) {\n    pos++;\n  }\n  const count = pos - start;\n\n  // treat end of the line as a whitespace\n  const nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n  const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n  const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n  const isLastWhiteSpace = isWhiteSpace(lastChar);\n  const isNextWhiteSpace = isWhiteSpace(nextChar);\n  if (isNextWhiteSpace) {\n    left_flanking = false;\n  } else if (isNextPunctChar) {\n    if (!(isLastWhiteSpace || isLastPunctChar)) {\n      left_flanking = false;\n    }\n  }\n  if (isLastWhiteSpace) {\n    right_flanking = false;\n  } else if (isLastPunctChar) {\n    if (!(isNextWhiteSpace || isNextPunctChar)) {\n      right_flanking = false;\n    }\n  }\n  if (!canSplitWord) {\n    can_open = left_flanking && (!right_flanking || isLastPunctChar);\n    can_close = right_flanking && (!left_flanking || isNextPunctChar);\n  } else {\n    can_open = left_flanking;\n    can_close = right_flanking;\n  }\n  return {\n    can_open,\n    can_close,\n    length: count\n  };\n};\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token;\n\n// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar(ch) {\n  switch (ch) {\n    case 0x0A /* \\n */:\n    case 0x21 /* ! */:\n    case 0x23 /* # */:\n    case 0x24 /* $ */:\n    case 0x25 /* % */:\n    case 0x26 /* & */:\n    case 0x2A /* * */:\n    case 0x2B /* + */:\n    case 0x2D /* - */:\n    case 0x3A /* : */:\n    case 0x3C /* < */:\n    case 0x3D /* = */:\n    case 0x3E /* > */:\n    case 0x40 /* @ */:\n    case 0x5B /* [ */:\n    case 0x5C /* \\ */:\n    case 0x5D /* ] */:\n    case 0x5E /* ^ */:\n    case 0x5F /* _ */:\n    case 0x60 /* ` */:\n    case 0x7B /* { */:\n    case 0x7D /* } */:\n    case 0x7E /* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\nfunction text(state, silent) {\n  let pos = state.pos;\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n  if (pos === state.pos) {\n    return false;\n  }\n  if (!silent) {\n    state.pending += state.src.slice(state.pos, pos);\n  }\n  state.pos = pos;\n  return true;\n}\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParcerInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n}; */\n\n// Process links like https://example.org/\n\n// RFC3986: scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nconst SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i;\nfunction linkify(state, silent) {\n  if (!state.md.options.linkify) return false;\n  if (state.linkLevel > 0) return false;\n  const pos = state.pos;\n  const max = state.posMax;\n  if (pos + 3 > max) return false;\n  if (state.src.charCodeAt(pos) !== 0x3A /* : */) return false;\n  if (state.src.charCodeAt(pos + 1) !== 0x2F /* / */) return false;\n  if (state.src.charCodeAt(pos + 2) !== 0x2F /* / */) return false;\n  const match = state.pending.match(SCHEME_RE);\n  if (!match) return false;\n  const proto = match[1];\n  const link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length));\n  if (!link) return false;\n  let url = link.url;\n\n  // invalid link, but still detected by linkify somehow;\n  // need to check to prevent infinite loop below\n  if (url.length <= proto.length) return false;\n\n  // disallow '*' at the end of the link (conflicts with emphasis)\n  url = url.replace(/\\*+$/, '');\n  const fullUrl = state.md.normalizeLink(url);\n  if (!state.md.validateLink(fullUrl)) return false;\n  if (!silent) {\n    state.pending = state.pending.slice(0, -proto.length);\n    const token_o = state.push('link_open', 'a', 1);\n    token_o.attrs = [['href', fullUrl]];\n    token_o.markup = 'linkify';\n    token_o.info = 'auto';\n    const token_t = state.push('text', '', 0);\n    token_t.content = state.md.normalizeLinkText(url);\n    const token_c = state.push('link_close', 'a', -1);\n    token_c.markup = 'linkify';\n    token_c.info = 'auto';\n  }\n  state.pos += url.length - proto.length;\n  return true;\n}\n\n// Proceess '\\n'\n\nfunction newline(state, silent) {\n  let pos = state.pos;\n  if (state.src.charCodeAt(pos) !== 0x0A /* \\n */) {\n    return false;\n  }\n  const pmax = state.pending.length - 1;\n  const max = state.posMax;\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        // Find whitespaces tail of pending chars.\n        let ws = pmax - 1;\n        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--;\n        state.pending = state.pending.slice(0, ws);\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n  pos++;\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n  state.pos = pos;\n  return true;\n}\n\n// Process escaped chars and hardbreaks\n\nconst ESCAPED = [];\nfor (let i = 0; i < 256; i++) {\n  ESCAPED.push(0);\n}\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'.split('').forEach(function (ch) {\n  ESCAPED[ch.charCodeAt(0)] = 1;\n});\nfunction escape(state, silent) {\n  let pos = state.pos;\n  const max = state.posMax;\n  if (state.src.charCodeAt(pos) !== 0x5C /* \\ */) return false;\n  pos++;\n\n  // '\\' at the end of the inline block\n  if (pos >= max) return false;\n  let ch1 = state.src.charCodeAt(pos);\n  if (ch1 === 0x0A) {\n    if (!silent) {\n      state.push('hardbreak', 'br', 0);\n    }\n    pos++;\n    // skip leading whitespaces from next line\n    while (pos < max) {\n      ch1 = state.src.charCodeAt(pos);\n      if (!isSpace(ch1)) break;\n      pos++;\n    }\n    state.pos = pos;\n    return true;\n  }\n  let escapedStr = state.src[pos];\n  if (ch1 >= 0xD800 && ch1 <= 0xDBFF && pos + 1 < max) {\n    const ch2 = state.src.charCodeAt(pos + 1);\n    if (ch2 >= 0xDC00 && ch2 <= 0xDFFF) {\n      escapedStr += state.src[pos + 1];\n      pos++;\n    }\n  }\n  const origStr = '\\\\' + escapedStr;\n  if (!silent) {\n    const token = state.push('text_special', '', 0);\n    if (ch1 < 256 && ESCAPED[ch1] !== 0) {\n      token.content = escapedStr;\n    } else {\n      token.content = origStr;\n    }\n    token.markup = origStr;\n    token.info = 'escape';\n  }\n  state.pos = pos + 1;\n  return true;\n}\n\n// Parse backticks\n\nfunction backtick(state, silent) {\n  let pos = state.pos;\n  const ch = state.src.charCodeAt(pos);\n  if (ch !== 0x60 /* ` */) {\n    return false;\n  }\n  const start = pos;\n  pos++;\n  const max = state.posMax;\n\n  // scan marker length\n  while (pos < max && state.src.charCodeAt(pos) === 0x60 /* ` */) {\n    pos++;\n  }\n  const marker = state.src.slice(start, pos);\n  const openerLength = marker.length;\n  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n    if (!silent) state.pending += marker;\n    state.pos += openerLength;\n    return true;\n  }\n  let matchEnd = pos;\n  let matchStart;\n\n  // Nothing found in the cache, scan until the end of the line (or until marker is found)\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    // scan marker length\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60 /* ` */) {\n      matchEnd++;\n    }\n    const closerLength = matchEnd - matchStart;\n    if (closerLength === openerLength) {\n      // Found matching closer length.\n      if (!silent) {\n        const token = state.push('code_inline', 'code', 0);\n        token.markup = marker;\n        token.content = state.src.slice(pos, matchStart).replace(/\\n/g, ' ').replace(/^ (.+) $/, '$1');\n      }\n      state.pos = matchEnd;\n      return true;\n    }\n\n    // Some different length found, put it in cache as upper limit of where closer can be found\n    state.backticks[closerLength] = matchStart;\n  }\n\n  // Scanned through the end, didn't find anything\n  state.backticksScanned = true;\n  if (!silent) state.pending += marker;\n  state.pos += openerLength;\n  return true;\n}\n\n// ~~strike through~~\n//\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nfunction strikethrough_tokenize(state, silent) {\n  const start = state.pos;\n  const marker = state.src.charCodeAt(start);\n  if (silent) {\n    return false;\n  }\n  if (marker !== 0x7E /* ~ */) {\n    return false;\n  }\n  const scanned = state.scanDelims(state.pos, true);\n  let len = scanned.length;\n  const ch = String.fromCharCode(marker);\n  if (len < 2) {\n    return false;\n  }\n  let token;\n  if (len % 2) {\n    token = state.push('text', '', 0);\n    token.content = ch;\n    len--;\n  }\n  for (let i = 0; i < len; i += 2) {\n    token = state.push('text', '', 0);\n    token.content = ch + ch;\n    state.delimiters.push({\n      marker,\n      length: 0,\n      // disable \"rule of 3\" length checks meant for emphasis\n      token: state.tokens.length - 1,\n      end: -1,\n      open: scanned.can_open,\n      close: scanned.can_close\n    });\n  }\n  state.pos += scanned.length;\n  return true;\n}\nfunction postProcess$1(state, delimiters) {\n  let token;\n  const loneMarkers = [];\n  const max = delimiters.length;\n  for (let i = 0; i < max; i++) {\n    const startDelim = delimiters[i];\n    if (startDelim.marker !== 0x7E /* ~ */) {\n      continue;\n    }\n    if (startDelim.end === -1) {\n      continue;\n    }\n    const endDelim = delimiters[startDelim.end];\n    token = state.tokens[startDelim.token];\n    token.type = 's_open';\n    token.tag = 's';\n    token.nesting = 1;\n    token.markup = '~~';\n    token.content = '';\n    token = state.tokens[endDelim.token];\n    token.type = 's_close';\n    token.tag = 's';\n    token.nesting = -1;\n    token.markup = '~~';\n    token.content = '';\n    if (state.tokens[endDelim.token - 1].type === 'text' && state.tokens[endDelim.token - 1].content === '~') {\n      loneMarkers.push(endDelim.token - 1);\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    const i = loneMarkers.pop();\n    let j = i + 1;\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++;\n    }\n    j--;\n    if (i !== j) {\n      token = state.tokens[j];\n      state.tokens[j] = state.tokens[i];\n      state.tokens[i] = token;\n    }\n  }\n}\n\n// Walk through delimiter list and replace text tokens with tags\n//\nfunction strikethrough_postProcess(state) {\n  const tokens_meta = state.tokens_meta;\n  const max = state.tokens_meta.length;\n  postProcess$1(state, state.delimiters);\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess$1(state, tokens_meta[curr].delimiters);\n    }\n  }\n}\nvar r_strikethrough = {\n  tokenize: strikethrough_tokenize,\n  postProcess: strikethrough_postProcess\n};\n\n// Process *this* and _that_\n//\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nfunction emphasis_tokenize(state, silent) {\n  const start = state.pos;\n  const marker = state.src.charCodeAt(start);\n  if (silent) {\n    return false;\n  }\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) {\n    return false;\n  }\n  const scanned = state.scanDelims(state.pos, marker === 0x2A);\n  for (let i = 0; i < scanned.length; i++) {\n    const token = state.push('text', '', 0);\n    token.content = String.fromCharCode(marker);\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker,\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n      // A position of the token this delimiter corresponds to.\n      //\n      token: state.tokens.length - 1,\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end: -1,\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open: scanned.can_open,\n      close: scanned.can_close\n    });\n  }\n  state.pos += scanned.length;\n  return true;\n}\nfunction postProcess(state, delimiters) {\n  const max = delimiters.length;\n  for (let i = max - 1; i >= 0; i--) {\n    const startDelim = delimiters[i];\n    if (startDelim.marker !== 0x5F /* _ */ && startDelim.marker !== 0x2A /* * */) {\n      continue;\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue;\n    }\n    const endDelim = delimiters[startDelim.end];\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    const isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 &&\n    // check that first two markers match and adjacent\n    delimiters[i - 1].marker === startDelim.marker && delimiters[i - 1].token === startDelim.token - 1 &&\n    // check that last two markers are adjacent (we can safely assume they match)\n    delimiters[startDelim.end + 1].token === endDelim.token + 1;\n    const ch = String.fromCharCode(startDelim.marker);\n    const token_o = state.tokens[startDelim.token];\n    token_o.type = isStrong ? 'strong_open' : 'em_open';\n    token_o.tag = isStrong ? 'strong' : 'em';\n    token_o.nesting = 1;\n    token_o.markup = isStrong ? ch + ch : ch;\n    token_o.content = '';\n    const token_c = state.tokens[endDelim.token];\n    token_c.type = isStrong ? 'strong_close' : 'em_close';\n    token_c.tag = isStrong ? 'strong' : 'em';\n    token_c.nesting = -1;\n    token_c.markup = isStrong ? ch + ch : ch;\n    token_c.content = '';\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = '';\n      state.tokens[delimiters[startDelim.end + 1].token].content = '';\n      i--;\n    }\n  }\n}\n\n// Walk through delimiter list and replace text tokens with tags\n//\nfunction emphasis_post_process(state) {\n  const tokens_meta = state.tokens_meta;\n  const max = state.tokens_meta.length;\n  postProcess(state, state.delimiters);\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n}\nvar r_emphasis = {\n  tokenize: emphasis_tokenize,\n  postProcess: emphasis_post_process\n};\n\n// Process [link](<to> \"stuff\")\n\nfunction link(state, silent) {\n  let code, label, res, ref;\n  let href = '';\n  let title = '';\n  let start = state.pos;\n  let parseReference = true;\n  if (state.src.charCodeAt(state.pos) !== 0x5B /* [ */) {\n    return false;\n  }\n  const oldPos = state.pos;\n  const max = state.posMax;\n  const labelStart = state.pos + 1;\n  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) {\n    return false;\n  }\n  let pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28 /* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false;\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) {\n        break;\n      }\n    }\n    if (pos >= max) {\n      return false;\n    }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                ^^ skipping these spaces\n      start = pos;\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) {\n          break;\n        }\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                  ^^^^^^^ parsing link title\n      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n      if (pos < max && start !== pos && res.ok) {\n        title = res.str;\n        pos = res.pos;\n\n        // [link](  <href>  \"title\"  )\n        //                         ^^ skipping these spaces\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos);\n          if (!isSpace(code) && code !== 0x0A) {\n            break;\n          }\n        }\n      }\n    }\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29 /* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true;\n    }\n    pos++;\n  }\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') {\n      return false;\n    }\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B /* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) {\n      label = state.src.slice(labelStart, labelEnd);\n    }\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n    const token_o = state.push('link_open', 'a', 1);\n    const attrs = [['href', href]];\n    token_o.attrs = attrs;\n    if (title) {\n      attrs.push(['title', title]);\n    }\n    state.linkLevel++;\n    state.md.inline.tokenize(state);\n    state.linkLevel--;\n    state.push('link_close', 'a', -1);\n  }\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n}\n\n// Process ![image](<src> \"title\")\n\nfunction image(state, silent) {\n  let code, content, label, pos, ref, res, title, start;\n  let href = '';\n  const oldPos = state.pos;\n  const max = state.posMax;\n  if (state.src.charCodeAt(state.pos) !== 0x21 /* ! */) {\n    return false;\n  }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B /* [ */) {\n    return false;\n  }\n  const labelStart = state.pos + 2;\n  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) {\n    return false;\n  }\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28 /* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) {\n        break;\n      }\n    }\n    if (pos >= max) {\n      return false;\n    }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) {\n        break;\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) {\n          break;\n        }\n      }\n    } else {\n      title = '';\n    }\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29 /* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') {\n      return false;\n    }\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B /* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) {\n      label = state.src.slice(labelStart, labelEnd);\n    }\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd);\n    const tokens = [];\n    state.md.inline.parse(content, state.md, state.env, tokens);\n    const token = state.push('image', 'img', 0);\n    const attrs = [['src', href], ['alt', '']];\n    token.attrs = attrs;\n    token.children = tokens;\n    token.content = content;\n    if (title) {\n      attrs.push(['title', title]);\n    }\n  }\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n}\n\n// Process autolinks '<protocol:...>'\n\n/* eslint max-len:0 */\nconst EMAIL_RE = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;\n/* eslint-disable-next-line no-control-regex */\nconst AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\\x00-\\x20]*)$/;\nfunction autolink(state, silent) {\n  let pos = state.pos;\n  if (state.src.charCodeAt(pos) !== 0x3C /* < */) {\n    return false;\n  }\n  const start = state.pos;\n  const max = state.posMax;\n  for (;;) {\n    if (++pos >= max) return false;\n    const ch = state.src.charCodeAt(pos);\n    if (ch === 0x3C /* < */) return false;\n    if (ch === 0x3E /* > */) break;\n  }\n  const url = state.src.slice(start + 1, pos);\n  if (AUTOLINK_RE.test(url)) {\n    const fullUrl = state.md.normalizeLink(url);\n    if (!state.md.validateLink(fullUrl)) {\n      return false;\n    }\n    if (!silent) {\n      const token_o = state.push('link_open', 'a', 1);\n      token_o.attrs = [['href', fullUrl]];\n      token_o.markup = 'autolink';\n      token_o.info = 'auto';\n      const token_t = state.push('text', '', 0);\n      token_t.content = state.md.normalizeLinkText(url);\n      const token_c = state.push('link_close', 'a', -1);\n      token_c.markup = 'autolink';\n      token_c.info = 'auto';\n    }\n    state.pos += url.length + 2;\n    return true;\n  }\n  if (EMAIL_RE.test(url)) {\n    const fullUrl = state.md.normalizeLink('mailto:' + url);\n    if (!state.md.validateLink(fullUrl)) {\n      return false;\n    }\n    if (!silent) {\n      const token_o = state.push('link_open', 'a', 1);\n      token_o.attrs = [['href', fullUrl]];\n      token_o.markup = 'autolink';\n      token_o.info = 'auto';\n      const token_t = state.push('text', '', 0);\n      token_t.content = state.md.normalizeLinkText(url);\n      const token_c = state.push('link_close', 'a', -1);\n      token_c.markup = 'autolink';\n      token_c.info = 'auto';\n    }\n    state.pos += url.length + 2;\n    return true;\n  }\n  return false;\n}\n\n// Process html tags\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\nfunction isLetter(ch) {\n  /* eslint no-bitwise:0 */\n  const lc = ch | 0x20; // to lower case\n  return lc >= 0x61 /* a */ && lc <= 0x7a /* z */;\n}\nfunction html_inline(state, silent) {\n  if (!state.md.options.html) {\n    return false;\n  }\n\n  // Check start\n  const max = state.posMax;\n  const pos = state.pos;\n  if (state.src.charCodeAt(pos) !== 0x3C /* < */ || pos + 2 >= max) {\n    return false;\n  }\n\n  // Quick fail on second char\n  const ch = state.src.charCodeAt(pos + 1);\n  if (ch !== 0x21 /* ! */ && ch !== 0x3F /* ? */ && ch !== 0x2F /* / */ && !isLetter(ch)) {\n    return false;\n  }\n  const match = state.src.slice(pos).match(HTML_TAG_RE);\n  if (!match) {\n    return false;\n  }\n  if (!silent) {\n    const token = state.push('html_inline', '', 0);\n    token.content = match[0];\n    if (isLinkOpen(token.content)) state.linkLevel++;\n    if (isLinkClose(token.content)) state.linkLevel--;\n  }\n  state.pos += match[0].length;\n  return true;\n}\n\n// Process html entity - &#123;, &#xAF;, &quot;, ...\n\nconst DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;\nconst NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;\nfunction entity(state, silent) {\n  const pos = state.pos;\n  const max = state.posMax;\n  if (state.src.charCodeAt(pos) !== 0x26 /* & */) return false;\n  if (pos + 1 >= max) return false;\n  const ch = state.src.charCodeAt(pos + 1);\n  if (ch === 0x23 /* # */) {\n    const match = state.src.slice(pos).match(DIGITAL_RE);\n    if (match) {\n      if (!silent) {\n        const code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n        const token = state.push('text_special', '', 0);\n        token.content = isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);\n        token.markup = match[0];\n        token.info = 'entity';\n      }\n      state.pos += match[0].length;\n      return true;\n    }\n  } else {\n    const match = state.src.slice(pos).match(NAMED_RE);\n    if (match) {\n      const decoded = entities.decodeHTML(match[0]);\n      if (decoded !== match[0]) {\n        if (!silent) {\n          const token = state.push('text_special', '', 0);\n          token.content = decoded;\n          token.markup = match[0];\n          token.info = 'entity';\n        }\n        state.pos += match[0].length;\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n// For each opening emphasis-like marker find a matching closing one\n//\n\nfunction processDelimiters(delimiters) {\n  const openersBottom = {};\n  const max = delimiters.length;\n  if (!max) return;\n\n  // headerIdx is the first delimiter of the current (where closer is) delimiter run\n  let headerIdx = 0;\n  let lastTokenIdx = -2; // needs any value lower than -1\n  const jumps = [];\n  for (let closerIdx = 0; closerIdx < max; closerIdx++) {\n    const closer = delimiters[closerIdx];\n    jumps.push(0);\n\n    // markers belong to same delimiter run if:\n    //  - they have adjacent tokens\n    //  - AND markers are the same\n    //\n    if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {\n      headerIdx = closerIdx;\n    }\n    lastTokenIdx = closer.token;\n\n    // Length is only used for emphasis-specific \"rule of 3\",\n    // if it's not defined (in strikethrough or 3rd party plugins),\n    // we can default it to 0 to disable those checks.\n    //\n    closer.length = closer.length || 0;\n    if (!closer.close) continue;\n\n    // Previously calculated lower bounds (previous fails)\n    // for each marker, each delimiter length modulo 3,\n    // and for whether this closer can be an opener;\n    // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460\n    /* eslint-disable-next-line no-prototype-builtins */\n    if (!openersBottom.hasOwnProperty(closer.marker)) {\n      openersBottom[closer.marker] = [-1, -1, -1, -1, -1, -1];\n    }\n    const minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + closer.length % 3];\n    let openerIdx = headerIdx - jumps[headerIdx] - 1;\n    let newMinOpenerIdx = openerIdx;\n    for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {\n      const opener = delimiters[openerIdx];\n      if (opener.marker !== closer.marker) continue;\n      if (opener.open && opener.end < 0) {\n        let isOddMatch = false;\n\n        // from spec:\n        //\n        // If one of the delimiters can both open and close emphasis, then the\n        // sum of the lengths of the delimiter runs containing the opening and\n        // closing delimiters must not be a multiple of 3 unless both lengths\n        // are multiples of 3.\n        //\n        if (opener.close || closer.open) {\n          if ((opener.length + closer.length) % 3 === 0) {\n            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n              isOddMatch = true;\n            }\n          }\n        }\n        if (!isOddMatch) {\n          // If previous delimiter cannot be an opener, we can safely skip\n          // the entire sequence in future checks. This is required to make\n          // sure algorithm has linear complexity (see *_*_*_*_*_... case).\n          //\n          const lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? jumps[openerIdx - 1] + 1 : 0;\n          jumps[closerIdx] = closerIdx - openerIdx + lastJump;\n          jumps[openerIdx] = lastJump;\n          closer.open = false;\n          opener.end = closerIdx;\n          opener.close = false;\n          newMinOpenerIdx = -1;\n          // treat next token as start of run,\n          // it optimizes skips in **<...>**a**<...>** pathological case\n          lastTokenIdx = -2;\n          break;\n        }\n      }\n    }\n    if (newMinOpenerIdx !== -1) {\n      // If match for this delimiter run failed, we want to set lower bound for\n      // future lookups. This is required to make sure algorithm has linear\n      // complexity.\n      //\n      // See details here:\n      // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442\n      //\n      openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length || 0) % 3] = newMinOpenerIdx;\n    }\n  }\n}\nfunction link_pairs(state) {\n  const tokens_meta = state.tokens_meta;\n  const max = state.tokens_meta.length;\n  processDelimiters(state.delimiters);\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      processDelimiters(tokens_meta[curr].delimiters);\n    }\n  }\n}\n\n// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\n\nfunction fragments_join(state) {\n  let curr, last;\n  let level = 0;\n  const tokens = state.tokens;\n  const max = state.tokens.length;\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels after emphasis/strikethrough turns some text nodes\n    // into opening/closing tags\n    if (tokens[curr].nesting < 0) level--; // closing tag\n    tokens[curr].level = level;\n    if (tokens[curr].nesting > 0) level++; // opening tag\n\n    if (tokens[curr].type === 'text' && curr + 1 < max && tokens[curr + 1].type === 'text') {\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n    } else {\n      if (curr !== last) {\n        tokens[last] = tokens[curr];\n      }\n      last++;\n    }\n  }\n  if (curr !== last) {\n    tokens.length = last;\n  }\n}\n\n/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n\n// Parser rules\n\nconst _rules = [['text', text], ['linkify', linkify], ['newline', newline], ['escape', escape], ['backticks', backtick], ['strikethrough', r_strikethrough.tokenize], ['emphasis', r_emphasis.tokenize], ['link', link], ['image', image], ['autolink', autolink], ['html_inline', html_inline], ['entity', entity]];\n\n// `rule2` ruleset was created specifically for emphasis/strikethrough\n// post-processing and may be changed in the future.\n//\n// Don't use this for anything except pairs (plugins working with `balance_pairs`).\n//\nconst _rules2 = [['balance_pairs', link_pairs], ['strikethrough', r_strikethrough.postProcess], ['emphasis', r_emphasis.postProcess],\n// rules for pairs separate '**' into its own text tokens, which may be left unused,\n// rule below merges unused segments back with the rest of the text\n['fragments_join', fragments_join]];\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline() {\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler();\n  for (let i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler();\n  for (let i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n  }\n}\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  const pos = state.pos;\n  const rules = this.ruler.getRules('');\n  const len = rules.length;\n  const maxNesting = state.md.options.maxNesting;\n  const cache = state.cache;\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos];\n    return;\n  }\n  let ok = false;\n  if (state.level < maxNesting) {\n    for (let i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++;\n      ok = rules[i](state, true);\n      state.level--;\n      if (ok) {\n        if (pos >= state.pos) {\n          throw new Error(\"inline rule didn't increment state.pos\");\n        }\n        break;\n      }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax;\n  }\n  if (!ok) {\n    state.pos++;\n  }\n  cache[pos] = state.pos;\n};\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  const rules = this.ruler.getRules('');\n  const len = rules.length;\n  const end = state.posMax;\n  const maxNesting = state.md.options.maxNesting;\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n    const prevPos = state.pos;\n    let ok = false;\n    if (state.level < maxNesting) {\n      for (let i = 0; i < len; i++) {\n        ok = rules[i](state, false);\n        if (ok) {\n          if (prevPos >= state.pos) {\n            throw new Error(\"inline rule didn't increment state.pos\");\n          }\n          break;\n        }\n      }\n    }\n    if (ok) {\n      if (state.pos >= end) {\n        break;\n      }\n      continue;\n    }\n    state.pending += state.src[state.pos++];\n  }\n  if (state.pending) {\n    state.pushPending();\n  }\n};\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  const state = new this.State(str, md, env, outTokens);\n  this.tokenize(state);\n  const rules = this.ruler2.getRules('');\n  const len = rules.length;\n  for (let i = 0; i < len; i++) {\n    rules[i](state);\n  }\n};\nParserInline.prototype.State = StateInline;\n\n// markdown-it default options\n\nvar cfg_default = {\n  options: {\n    // Enable HTML tags in source\n    html: false,\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: false,\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n    // autoconvert URL-like texts to links\n    linkify: false,\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019',\n    /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n    // Internal protection, recursion limit\n    maxNesting: 100\n  },\n  components: {\n    core: {},\n    block: {},\n    inline: {}\n  }\n};\n\n// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\nvar cfg_zero = {\n  options: {\n    // Enable HTML tags in source\n    html: false,\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: false,\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n    // autoconvert URL-like texts to links\n    linkify: false,\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019',\n    /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n    // Internal protection, recursion limit\n    maxNesting: 20\n  },\n  components: {\n    core: {\n      rules: ['normalize', 'block', 'inline', 'text_join']\n    },\n    block: {\n      rules: ['paragraph']\n    },\n    inline: {\n      rules: ['text'],\n      rules2: ['balance_pairs', 'fragments_join']\n    }\n  }\n};\n\n// Commonmark default options\n\nvar cfg_commonmark = {\n  options: {\n    // Enable HTML tags in source\n    html: true,\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: true,\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n    // autoconvert URL-like texts to links\n    linkify: false,\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019',\n    /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n    // Internal protection, recursion limit\n    maxNesting: 20\n  },\n  components: {\n    core: {\n      rules: ['normalize', 'block', 'inline', 'text_join']\n    },\n    block: {\n      rules: ['blockquote', 'code', 'fence', 'heading', 'hr', 'html_block', 'lheading', 'list', 'reference', 'paragraph']\n    },\n    inline: {\n      rules: ['autolink', 'backticks', 'emphasis', 'entity', 'escape', 'html_inline', 'image', 'link', 'newline', 'text'],\n      rules2: ['balance_pairs', 'emphasis', 'fragments_join']\n    }\n  }\n};\n\n// Main parser class\n\nconst config = {\n  default: cfg_default,\n  zero: cfg_zero,\n  commonmark: cfg_commonmark\n};\n\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nconst BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\nconst GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\nfunction validateLink(url) {\n  // url should be normalized at this point, and existing entities are decoded\n  const str = url.trim().toLowerCase();\n  return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) : true;\n}\nconst RECODE_HOSTNAME_FOR = ['http:', 'https:', 'mailto:'];\nfunction normalizeLink(url) {\n  const parsed = mdurl__namespace.parse(url, true);\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname);\n      } catch (er) {/**/}\n    }\n  }\n  return mdurl__namespace.encode(mdurl__namespace.format(parsed));\n}\nfunction normalizeLinkText(url) {\n  const parsed = mdurl__namespace.parse(url, true);\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname);\n      } catch (er) {/**/}\n    }\n  }\n\n  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\n  return mdurl__namespace.decode(mdurl__namespace.format(parsed), mdurl__namespace.decode.defaultChars + '%');\n}\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>` or `<code>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre><code class=\"hljs\">' +\n *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre><code class=\"hljs\">' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt(presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options);\n  }\n  if (!options) {\n    if (!isString(presetName)) {\n      options = presetName || {};\n      presetName = 'default';\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline();\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock();\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new Core();\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).\n   **/\n  this.renderer = new Renderer();\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt();\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink;\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink;\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText;\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.mjs).\n   **/\n  this.utils = utils;\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = assign({}, helpers);\n  this.options = {};\n  this.configure(presetName);\n  if (options) {\n    this.set(options);\n  }\n}\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  assign(this.options, options);\n  return this;\n};\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you will - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  const self = this;\n  if (isString(presets)) {\n    const presetName = presets;\n    presets = config[presetName];\n    if (!presets) {\n      throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name');\n    }\n  }\n  if (!presets) {\n    throw new Error('Wrong `markdown-it` preset, can\\'t be empty');\n  }\n  if (presets.options) {\n    self.set(presets.options);\n  }\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules);\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2);\n      }\n    });\n  }\n  return this;\n};\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  let result = [];\n  if (!Array.isArray(list)) {\n    list = [list];\n  }\n  ['core', 'block', 'inline'].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true));\n  }, this);\n  result = result.concat(this.inline.ruler2.enable(list, true));\n  const missed = list.filter(function (name) {\n    return result.indexOf(name) < 0;\n  });\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  let result = [];\n  if (!Array.isArray(list)) {\n    list = [list];\n  }\n  ['core', 'block', 'inline'].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true));\n  }, this);\n  result = result.concat(this.inline.ruler2.disable(list, true));\n  const missed = list.filter(function (name) {\n    return result.indexOf(name) < 0;\n  });\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  const args = [this].concat(Array.prototype.slice.call(arguments, 1));\n  plugin.apply(plugin, args);\n  return this;\n};\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and return list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String');\n  }\n  const state = new this.core.State(src, this, env);\n  this.core.process(state);\n  return state.tokens;\n};\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {};\n  return this.renderer.render(this.parse(src, env), this.options, env);\n};\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  const state = new this.core.State(src, this, env);\n  state.inlineMode = true;\n  this.core.process(state);\n  return state.tokens;\n};\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {};\n  return this.renderer.render(this.parseInline(src, env), this.options, env);\n};\nmodule.exports = MarkdownIt;","map":{"version":3,"names":["require","mdurl","ucmicro","entities","LinkifyIt","punycode","_interopNamespaceDefault","e","n","Object","create","keys","forEach","k","d","getOwnPropertyDescriptor","defineProperty","get","enumerable","default","freeze","mdurl__namespace","ucmicro__namespace","_class","obj","prototype","toString","call","isString","_hasOwnProperty","hasOwnProperty","has","object","key","assign","sources","Array","slice","arguments","source","TypeError","arrayReplaceAt","src","pos","newElements","concat","isValidEntityCode","c","fromCodePoint","surrogate1","surrogate2","String","fromCharCode","UNESCAPE_MD_RE","ENTITY_RE","UNESCAPE_ALL_RE","RegExp","DIGITAL_ENTITY_TEST_RE","replaceEntityPattern","match","name","charCodeAt","test","code","toLowerCase","parseInt","decoded","decodeHTML","unescapeMd","str","indexOf","replace","unescapeAll","escaped","entity","HTML_ESCAPE_TEST_RE","HTML_ESCAPE_REPLACE_RE","HTML_REPLACEMENTS","replaceUnsafeChar","ch","escapeHtml","REGEXP_ESCAPE_RE","escapeRE","isSpace","isWhiteSpace","isPunctChar","P","isMdAsciiPunct","normalizeReference","trim","toUpperCase","lib","utils","__proto__","parseLinkLabel","state","start","disableNested","level","found","marker","prevPos","max","posMax","oldPos","md","inline","skipToken","labelEnd","parseLinkDestination","result","ok","lines","parseLinkTitle","helpers","default_rules","code_inline","tokens","idx","options","env","slf","token","renderAttrs","content","code_block","fence","info","langName","langAttrs","arr","split","join","highlighted","highlight","i","attrIndex","tmpAttrs","attrs","push","langPrefix","tmpToken","image","renderInlineAsText","children","renderToken","hardbreak","xhtmlOut","softbreak","breaks","text","html_block","html_inline","Renderer","rules","l","length","hidden","block","nesting","tag","needLf","nextToken","type","renderInline","len","render","Ruler","__rules__","__cache__","__find__","__compile__","self","chains","rule","enabled","alt","altName","chain","fn","at","index","opt","Error","before","beforeName","ruleName","splice","after","afterName","enable","list","ignoreInvalid","isArray","enableOnly","disable","getRules","chainName","Token","map","markup","meta","attrPush","attrData","attrSet","value","attrGet","attrJoin","StateCore","inlineMode","NEWLINES_RE","NULL_RE","normalize","parse","tok","isLinkOpen$1","isLinkClose$1","linkify$1","blockTokens","linkify","j","pretest","htmlLinkLevel","currentToken","links","nodes","lastPos","ln","url","fullUrl","normalizeLink","validateLink","urlText","schema","normalizeLinkText","token_o","token_t","token_c","lastIndex","RARE_RE","SCOPED_ABBR_TEST_RE","SCOPED_ABBR_RE","SCOPED_ABBR","r","tm","replaceFn","replace_scoped","inlineTokens","inside_autolink","replace_rare","blkIdx","typographer","QUOTE_TEST_RE","QUOTE_RE","APOSTROPHE","replaceAt","process_inlines","stack","thisLevel","OUTER","t","exec","canOpen","canClose","isSingle","lastChar","nextChar","isLastPunctChar","isNextPunctChar","isLastWhiteSpace","isNextWhiteSpace","item","single","openQuote","closeQuote","quotes","smartquotes","text_join","curr","last","_rules$2","Core","ruler","process","State","StateBlock","bMarks","eMarks","tShift","sCount","bsCount","blkIndent","line","lineMax","tight","ddIndent","listIndent","parentType","s","indent","offset","indent_found","isEmpty","skipEmptyLines","from","skipSpaces","skipSpacesBack","min","skipChars","skipCharsBack","getLines","begin","end","keepLastLF","queue","lineIndent","lineStart","first","getLine","escapedSplit","isEscaped","current","substring","table","startLine","endLine","silent","nextLine","firstCh","secondCh","lineText","columns","aligns","shift","pop","columnCount","oldParentType","terminatorRules","token_to","tableLines","token_tho","token_htro","token_ho","token_il","tbodyLines","terminate","token_tbo","token_tro","token_tdo","mem","params","haveEndMarker","blockquote","oldLineMax","oldBMarks","oldBSCount","oldSCount","oldTShift","lastLineEmpty","isOutdented","initial","spaceAfterMarker","adjustTab","oldIndent","tokenize","hr","cnt","skipBulletListMarker","skipOrderedListMarker","markTightParagraphs","isTerminatingParagraph","isOrdered","markerValue","posAfterMarker","Number","markerCharCode","listTokIdx","listLines","prevEmptyEnd","contentStart","indentAfterMarker","itemLines","oldTight","oldListIndent","Math","reference","_endLine","destRes","href","destEndPos","destEndLineNo","titleRes","title","label","references","block_names","attr_name","unquoted","single_quoted","double_quoted","attr_value","attribute","open_tag","close_tag","comment","processing","declaration","cdata","HTML_TAG_RE","HTML_OPEN_CLOSE_TAG_RE","HTML_SEQUENCES","html","heading","tmp","token_i","lheading","paragraph","_rules$1","ParserBlock","maxNesting","hasEmptyLines","prevLine","outTokens","StateInline","tokens_meta","pending","pendingLevel","cache","delimiters","_prev_delimiters","backticks","backticksScanned","linkLevel","pushPending","token_meta","scanDelims","canSplitWord","can_open","can_close","left_flanking","right_flanking","count","isTerminatorChar","SCHEME_RE","proto","link","matchAtStart","newline","pmax","ws","ESCAPED","escape","ch1","escapedStr","ch2","origStr","backtick","openerLength","matchEnd","matchStart","closerLength","strikethrough_tokenize","scanned","open","close","postProcess$1","loneMarkers","startDelim","endDelim","strikethrough_postProcess","r_strikethrough","postProcess","emphasis_tokenize","isStrong","emphasis_post_process","r_emphasis","res","ref","parseReference","labelStart","EMAIL_RE","AUTOLINK_RE","autolink","isLinkOpen","isLinkClose","isLetter","lc","DIGITAL_RE","NAMED_RE","processDelimiters","openersBottom","headerIdx","lastTokenIdx","jumps","closerIdx","closer","minOpenerIdx","openerIdx","newMinOpenerIdx","opener","isOddMatch","lastJump","link_pairs","fragments_join","_rules","_rules2","ParserInline","ruler2","cfg_default","components","core","cfg_zero","rules2","cfg_commonmark","config","zero","commonmark","BAD_PROTO_RE","GOOD_DATA_RE","RECODE_HOSTNAME_FOR","parsed","hostname","protocol","toASCII","er","encode","format","toUnicode","decode","defaultChars","MarkdownIt","presetName","renderer","configure","set","presets","missed","filter","use","plugin","args","apply","parseInline","module","exports"],"sources":["/Users/wangxiaokang/Desktop/SpringBoot/vue-project/node_modules/markdown-it/dist/index.cjs.js"],"sourcesContent":["'use strict';\n\nvar mdurl = require('mdurl');\nvar ucmicro = require('uc.micro');\nvar entities = require('entities');\nvar LinkifyIt = require('linkify-it');\nvar punycode = require('punycode.js');\n\nfunction _interopNamespaceDefault(e) {\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n.default = e;\n  return Object.freeze(n);\n}\n\nvar mdurl__namespace = /*#__PURE__*/_interopNamespaceDefault(mdurl);\nvar ucmicro__namespace = /*#__PURE__*/_interopNamespaceDefault(ucmicro);\n\n// Utilities\n//\n\nfunction _class(obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isString(obj) {\n  return _class(obj) === '[object String]';\n}\nconst _hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction has(object, key) {\n  return _hasOwnProperty.call(object, key);\n}\n\n// Merge objects\n//\nfunction assign(obj /* from1, from2, from3, ... */) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  sources.forEach(function (source) {\n    if (!source) {\n      return;\n    }\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object');\n    }\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n  return obj;\n}\n\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt(src, pos, newElements) {\n  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n}\nfunction isValidEntityCode(c) {\n  /* eslint no-bitwise:0 */\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) {\n    return false;\n  }\n  // never used\n  if (c >= 0xFDD0 && c <= 0xFDEF) {\n    return false;\n  }\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) {\n    return false;\n  }\n  // control codes\n  if (c >= 0x00 && c <= 0x08) {\n    return false;\n  }\n  if (c === 0x0B) {\n    return false;\n  }\n  if (c >= 0x0E && c <= 0x1F) {\n    return false;\n  }\n  if (c >= 0x7F && c <= 0x9F) {\n    return false;\n  }\n  // out of range\n  if (c > 0x10FFFF) {\n    return false;\n  }\n  return true;\n}\nfunction fromCodePoint(c) {\n  /* eslint no-bitwise:0 */\n  if (c > 0xffff) {\n    c -= 0x10000;\n    const surrogate1 = 0xd800 + (c >> 10);\n    const surrogate2 = 0xdc00 + (c & 0x3ff);\n    return String.fromCharCode(surrogate1, surrogate2);\n  }\n  return String.fromCharCode(c);\n}\nconst UNESCAPE_MD_RE = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~])/g;\nconst ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;\nconst UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');\nconst DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i;\nfunction replaceEntityPattern(match, name) {\n  if (name.charCodeAt(0) === 0x23 /* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    const code = name[1].toLowerCase() === 'x' ? parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code);\n    }\n    return match;\n  }\n  const decoded = entities.decodeHTML(match);\n  if (decoded !== match) {\n    return decoded;\n  }\n  return match;\n}\n\n/* function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n} */\n\nfunction unescapeMd(str) {\n  if (str.indexOf('\\\\') < 0) {\n    return str;\n  }\n  return str.replace(UNESCAPE_MD_RE, '$1');\n}\nfunction unescapeAll(str) {\n  if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) {\n    return str;\n  }\n  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {\n    if (escaped) {\n      return escaped;\n    }\n    return replaceEntityPattern(match, entity);\n  });\n}\nconst HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nconst HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nconst HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\nfunction replaceUnsafeChar(ch) {\n  return HTML_REPLACEMENTS[ch];\n}\nfunction escapeHtml(str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n  return str;\n}\nconst REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\nfunction escapeRE(str) {\n  return str.replace(REGEXP_ESCAPE_RE, '\\\\$&');\n}\nfunction isSpace(code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true;\n  }\n  return false;\n}\n\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace(code) {\n  if (code >= 0x2000 && code <= 0x200A) {\n    return true;\n  }\n  switch (code) {\n    case 0x09: // \\t\n    case 0x0A: // \\n\n    case 0x0B: // \\v\n    case 0x0C: // \\f\n    case 0x0D: // \\r\n    case 0x20:\n    case 0xA0:\n    case 0x1680:\n    case 0x202F:\n    case 0x205F:\n    case 0x3000:\n      return true;\n  }\n  return false;\n}\n\n/* eslint-disable max-len */\n\n// Currently without astral characters support.\nfunction isPunctChar(ch) {\n  return ucmicro__namespace.P.test(ch);\n}\n\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct(ch) {\n  switch (ch) {\n    case 0x21 /* ! */:\n    case 0x22 /* \" */:\n    case 0x23 /* # */:\n    case 0x24 /* $ */:\n    case 0x25 /* % */:\n    case 0x26 /* & */:\n    case 0x27 /* ' */:\n    case 0x28 /* ( */:\n    case 0x29 /* ) */:\n    case 0x2A /* * */:\n    case 0x2B /* + */:\n    case 0x2C /* , */:\n    case 0x2D /* - */:\n    case 0x2E /* . */:\n    case 0x2F /* / */:\n    case 0x3A /* : */:\n    case 0x3B /* ; */:\n    case 0x3C /* < */:\n    case 0x3D /* = */:\n    case 0x3E /* > */:\n    case 0x3F /* ? */:\n    case 0x40 /* @ */:\n    case 0x5B /* [ */:\n    case 0x5C /* \\ */:\n    case 0x5D /* ] */:\n    case 0x5E /* ^ */:\n    case 0x5F /* _ */:\n    case 0x60 /* ` */:\n    case 0x7B /* { */:\n    case 0x7C /* | */:\n    case 0x7D /* } */:\n    case 0x7E /* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference(str) {\n  // Trim and collapse whitespace\n  //\n  str = str.trim().replace(/\\s+/g, ' ');\n\n  // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug\n  // fixed in v12 (couldn't find any details).\n  //\n  // So treat this one as a special case\n  // (remove this when node v10 is no longer supported).\n  //\n  if ('ẞ'.toLowerCase() === 'Ṿ') {\n    str = str.replace(/ẞ/g, 'ß');\n  }\n\n  // .toLowerCase().toUpperCase() should get rid of all differences\n  // between letter variants.\n  //\n  // Simple .toLowerCase() doesn't normalize 125 code points correctly,\n  // and .toUpperCase doesn't normalize 6 of them (list of exceptions:\n  // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently\n  // uppercased versions).\n  //\n  // Here's an example showing how it happens. Lets take greek letter omega:\n  // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)\n  //\n  // Unicode entries:\n  // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;\n  // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398\n  // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398\n  // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;\n  //\n  // Case-insensitive comparison should treat all of them as equivalent.\n  //\n  // But .toLowerCase() doesn't change ϑ (it's already lowercase),\n  // and .toUpperCase() doesn't change ϴ (already uppercase).\n  //\n  // Applying first lower then upper case normalizes any character:\n  // '\\u0398\\u03f4\\u03b8\\u03d1'.toLowerCase().toUpperCase() === '\\u0398\\u0398\\u0398\\u0398'\n  //\n  // Note: this is equivalent to unicode case folding; unicode normalization\n  // is a different step that is not required here.\n  //\n  // Final result should be uppercased, because it's later stored in an object\n  // (this avoid a conflict with Object.prototype members,\n  // most notably, `__proto__`)\n  //\n  return str.toLowerCase().toUpperCase();\n}\n\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nconst lib = {\n  mdurl: mdurl__namespace,\n  ucmicro: ucmicro__namespace\n};\n\nvar utils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  arrayReplaceAt: arrayReplaceAt,\n  assign: assign,\n  escapeHtml: escapeHtml,\n  escapeRE: escapeRE,\n  fromCodePoint: fromCodePoint,\n  has: has,\n  isMdAsciiPunct: isMdAsciiPunct,\n  isPunctChar: isPunctChar,\n  isSpace: isSpace,\n  isString: isString,\n  isValidEntityCode: isValidEntityCode,\n  isWhiteSpace: isWhiteSpace,\n  lib: lib,\n  normalizeReference: normalizeReference,\n  unescapeAll: unescapeAll,\n  unescapeMd: unescapeMd\n});\n\n// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n\nfunction parseLinkLabel(state, start, disableNested) {\n  let level, found, marker, prevPos;\n  const max = state.posMax;\n  const oldPos = state.pos;\n  state.pos = start + 1;\n  level = 1;\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos);\n    if (marker === 0x5D /* ] */) {\n      level--;\n      if (level === 0) {\n        found = true;\n        break;\n      }\n    }\n    prevPos = state.pos;\n    state.md.inline.skipToken(state);\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++;\n      } else if (disableNested) {\n        state.pos = oldPos;\n        return -1;\n      }\n    }\n  }\n  let labelEnd = -1;\n  if (found) {\n    labelEnd = state.pos;\n  }\n\n  // restore old state\n  state.pos = oldPos;\n  return labelEnd;\n}\n\n// Parse link destination\n//\n\nfunction parseLinkDestination(str, start, max) {\n  let code;\n  let pos = start;\n  const result = {\n    ok: false,\n    pos: 0,\n    lines: 0,\n    str: ''\n  };\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++;\n    while (pos < max) {\n      code = str.charCodeAt(pos);\n      if (code === 0x0A /* \\n */) {\n        return result;\n      }\n      if (code === 0x3C /* < */) {\n        return result;\n      }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1;\n        result.str = unescapeAll(str.slice(start + 1, pos));\n        result.ok = true;\n        return result;\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2;\n        continue;\n      }\n      pos++;\n    }\n\n    // no closing '>'\n    return result;\n  }\n\n  // this should be ... } else { ... branch\n\n  let level = 0;\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n    if (code === 0x20) {\n      break;\n    }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) {\n      break;\n    }\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      if (str.charCodeAt(pos + 1) === 0x20) {\n        break;\n      }\n      pos += 2;\n      continue;\n    }\n    if (code === 0x28 /* ( */) {\n      level++;\n      if (level > 32) {\n        return result;\n      }\n    }\n    if (code === 0x29 /* ) */) {\n      if (level === 0) {\n        break;\n      }\n      level--;\n    }\n    pos++;\n  }\n  if (start === pos) {\n    return result;\n  }\n  if (level !== 0) {\n    return result;\n  }\n  result.str = unescapeAll(str.slice(start, pos));\n  result.pos = pos;\n  result.ok = true;\n  return result;\n}\n\n// Parse link title\n//\n\nfunction parseLinkTitle(str, start, max) {\n  let code, marker;\n  let lines = 0;\n  let pos = start;\n  const result = {\n    ok: false,\n    pos: 0,\n    lines: 0,\n    str: ''\n  };\n  if (pos >= max) {\n    return result;\n  }\n  marker = str.charCodeAt(pos);\n  if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) {\n    return result;\n  }\n  pos++;\n\n  // if opening marker is \"(\", switch it to closing marker \")\"\n  if (marker === 0x28) {\n    marker = 0x29;\n  }\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n    if (code === marker) {\n      result.pos = pos + 1;\n      result.lines = lines;\n      result.str = unescapeAll(str.slice(start + 1, pos));\n      result.ok = true;\n      return result;\n    } else if (code === 0x28 /* ( */ && marker === 0x29 /* ) */) {\n      return result;\n    } else if (code === 0x0A) {\n      lines++;\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++;\n      if (str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n    pos++;\n  }\n  return result;\n}\n\n// Just a shortcut for bulk export\n\nvar helpers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  parseLinkDestination: parseLinkDestination,\n  parseLinkLabel: parseLinkLabel,\n  parseLinkTitle: parseLinkTitle\n});\n\n/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n\nconst default_rules = {};\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx];\n  return '<code' + slf.renderAttrs(token) + '>' + escapeHtml(token.content) + '</code>';\n};\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx];\n  return '<pre' + slf.renderAttrs(token) + '><code>' + escapeHtml(tokens[idx].content) + '</code></pre>\\n';\n};\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx];\n  const info = token.info ? unescapeAll(token.info).trim() : '';\n  let langName = '';\n  let langAttrs = '';\n  if (info) {\n    const arr = info.split(/(\\s+)/g);\n    langName = arr[0];\n    langAttrs = arr.slice(2).join('');\n  }\n  let highlighted;\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content);\n  } else {\n    highlighted = escapeHtml(token.content);\n  }\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n';\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .deepClone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    const i = token.attrIndex('class');\n    const tmpAttrs = token.attrs ? token.attrs.slice() : [];\n    if (i < 0) {\n      tmpAttrs.push(['class', options.langPrefix + langName]);\n    } else {\n      tmpAttrs[i] = tmpAttrs[i].slice();\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;\n    }\n\n    // Fake token just to render attributes\n    const tmpToken = {\n      attrs: tmpAttrs\n    };\n    return `<pre><code${slf.renderAttrs(tmpToken)}>${highlighted}</code></pre>\\n`;\n  }\n  return `<pre><code${slf.renderAttrs(token)}>${highlighted}</code></pre>\\n`;\n};\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx];\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] = slf.renderInlineAsText(token.children, options, env);\n  return slf.renderToken(tokens, idx, options);\n};\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n};\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? options.xhtmlOut ? '<br />\\n' : '<br>\\n' : '\\n';\n};\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content);\n};\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer() {\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules);\n}\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs(token) {\n  let i, l, result;\n  if (!token.attrs) {\n    return '';\n  }\n  result = '';\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"';\n  }\n  return result;\n};\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n  const token = tokens[idx];\n  let result = '';\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return '';\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n';\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag;\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token);\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /';\n  }\n\n  // Check if we need to add a newline after this tag\n  let needLf = false;\n  if (token.block) {\n    needLf = true;\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        const nextToken = tokens[idx + 1];\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false;\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false;\n        }\n      }\n    }\n  }\n  result += needLf ? '>\\n' : '>';\n  return result;\n};\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  let result = '';\n  const rules = this.rules;\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type;\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options);\n    }\n  }\n  return result;\n};\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  let result = '';\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    switch (tokens[i].type) {\n      case 'text':\n        result += tokens[i].content;\n        break;\n      case 'image':\n        result += this.renderInlineAsText(tokens[i].children, options, env);\n        break;\n      case 'html_inline':\n      case 'html_block':\n        result += tokens[i].content;\n        break;\n      case 'softbreak':\n      case 'hardbreak':\n        result += '\\n';\n        break;\n      // all other tokens are skipped\n    }\n  }\n  return result;\n};\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  let result = '';\n  const rules = this.rules;\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type;\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options, env);\n    }\n  }\n  return result;\n};\n\n/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n\n/**\n * new Ruler()\n **/\nfunction Ruler() {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = [];\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null;\n}\n\n// Helper methods, should not be used directly\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (let i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  const self = this;\n  const chains = [''];\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) {\n      return;\n    }\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName);\n      }\n    });\n  });\n  self.__cache__ = {};\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = [];\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) {\n        return;\n      }\n      if (chain && rule.alt.indexOf(chain) < 0) {\n        return;\n      }\n      self.__cache__[chain].push(rule.fn);\n    });\n  });\n};\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  const index = this.__find__(name);\n  const opt = options || {};\n  if (index === -1) {\n    throw new Error('Parser rule not found: ' + name);\n  }\n  this.__rules__[index].fn = fn;\n  this.__rules__[index].alt = opt.alt || [];\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  const index = this.__find__(beforeName);\n  const opt = options || {};\n  if (index === -1) {\n    throw new Error('Parser rule not found: ' + beforeName);\n  }\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  });\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  const index = this.__find__(afterName);\n  const opt = options || {};\n  if (index === -1) {\n    throw new Error('Parser rule not found: ' + afterName);\n  }\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  });\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  const opt = options || {};\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  });\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) {\n    list = [list];\n  }\n  const result = [];\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    const idx = this.__find__(name);\n    if (idx < 0) {\n      if (ignoreInvalid) {\n        return;\n      }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = true;\n    result.push(name);\n  }, this);\n  this.__cache__ = null;\n  return result;\n};\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) {\n    list = [list];\n  }\n  this.__rules__.forEach(function (rule) {\n    rule.enabled = false;\n  });\n  this.enable(list, ignoreInvalid);\n};\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) {\n    list = [list];\n  }\n  const result = [];\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    const idx = this.__find__(name);\n    if (idx < 0) {\n      if (ignoreInvalid) {\n        return;\n      }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = false;\n    result.push(name);\n  }, this);\n  this.__cache__ = null;\n  return result;\n};\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__();\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || [];\n};\n\n// Token class\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token(type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type = type;\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag = tag;\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs = null;\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map = null;\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting = nesting;\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level = 0;\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null;\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content = '';\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup = '';\n\n  /**\n   * Token#info -> String\n   *\n   * Additional information:\n   *\n   * - Info string for \"fence\" tokens\n   * - The value \"auto\" for autolink \"link_open\" and \"link_close\" tokens\n   * - The string value of the item marker for ordered-list \"list_item_open\" tokens\n   **/\n  this.info = '';\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta = null;\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block = false;\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden = false;\n}\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex(name) {\n  if (!this.attrs) {\n    return -1;\n  }\n  const attrs = this.attrs;\n  for (let i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush(attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData);\n  } else {\n    this.attrs = [attrData];\n  }\n};\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet(name, value) {\n  const idx = this.attrIndex(name);\n  const attrData = [name, value];\n  if (idx < 0) {\n    this.attrPush(attrData);\n  } else {\n    this.attrs[idx] = attrData;\n  }\n};\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet(name) {\n  const idx = this.attrIndex(name);\n  let value = null;\n  if (idx >= 0) {\n    value = this.attrs[idx][1];\n  }\n  return value;\n};\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin(name, value) {\n  const idx = this.attrIndex(name);\n  if (idx < 0) {\n    this.attrPush([name, value]);\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;\n  }\n};\n\n// Core state object\n//\n\nfunction StateCore(src, md, env) {\n  this.src = src;\n  this.env = env;\n  this.tokens = [];\n  this.inlineMode = false;\n  this.md = md; // link to parser instance\n}\n\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token;\n\n// Normalize input string\n\n// https://spec.commonmark.org/0.29/#line-ending\nconst NEWLINES_RE = /\\r\\n?|\\n/g;\nconst NULL_RE = /\\0/g;\nfunction normalize(state) {\n  let str;\n\n  // Normalize newlines\n  str = state.src.replace(NEWLINES_RE, '\\n');\n\n  // Replace NULL characters\n  str = str.replace(NULL_RE, '\\uFFFD');\n  state.src = str;\n}\n\nfunction block(state) {\n  let token;\n  if (state.inlineMode) {\n    token = new state.Token('inline', '', 0);\n    token.content = state.src;\n    token.map = [0, 1];\n    token.children = [];\n    state.tokens.push(token);\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens);\n  }\n}\n\nfunction inline(state) {\n  const tokens = state.tokens;\n\n  // Parse inlines\n  for (let i = 0, l = tokens.length; i < l; i++) {\n    const tok = tokens[i];\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n    }\n  }\n}\n\n// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n\nfunction isLinkOpen$1(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose$1(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\nfunction linkify$1(state) {\n  const blockTokens = state.tokens;\n  if (!state.md.options.linkify) {\n    return;\n  }\n  for (let j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' || !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue;\n    }\n    let tokens = blockTokens[j].children;\n    let htmlLinkLevel = 0;\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      const currentToken = tokens[i];\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--;\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--;\n        }\n        continue;\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen$1(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--;\n        }\n        if (isLinkClose$1(currentToken.content)) {\n          htmlLinkLevel++;\n        }\n      }\n      if (htmlLinkLevel > 0) {\n        continue;\n      }\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n        const text = currentToken.content;\n        let links = state.md.linkify.match(text);\n\n        // Now split string to nodes\n        const nodes = [];\n        let level = currentToken.level;\n        let lastPos = 0;\n\n        // forbid escape sequence at the start of the string,\n        // this avoids http\\://example.com/ from being linkified as\n        // http:<a href=\"//example.com/\">//example.com/</a>\n        if (links.length > 0 && links[0].index === 0 && i > 0 && tokens[i - 1].type === 'text_special') {\n          links = links.slice(1);\n        }\n        for (let ln = 0; ln < links.length; ln++) {\n          const url = links[ln].url;\n          const fullUrl = state.md.normalizeLink(url);\n          if (!state.md.validateLink(fullUrl)) {\n            continue;\n          }\n          let urlText = links[ln].text;\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n          } else {\n            urlText = state.md.normalizeLinkText(urlText);\n          }\n          const pos = links[ln].index;\n          if (pos > lastPos) {\n            const token = new state.Token('text', '', 0);\n            token.content = text.slice(lastPos, pos);\n            token.level = level;\n            nodes.push(token);\n          }\n          const token_o = new state.Token('link_open', 'a', 1);\n          token_o.attrs = [['href', fullUrl]];\n          token_o.level = level++;\n          token_o.markup = 'linkify';\n          token_o.info = 'auto';\n          nodes.push(token_o);\n          const token_t = new state.Token('text', '', 0);\n          token_t.content = urlText;\n          token_t.level = level;\n          nodes.push(token_t);\n          const token_c = new state.Token('link_close', 'a', -1);\n          token_c.level = --level;\n          token_c.markup = 'linkify';\n          token_c.info = 'auto';\n          nodes.push(token_c);\n          lastPos = links[ln].lastIndex;\n        }\n        if (lastPos < text.length) {\n          const token = new state.Token('text', '', 0);\n          token.content = text.slice(lastPos);\n          token.level = level;\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n}\n\n// Simple typographic replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - multiplications 2 x 4 -> 2 × 4\n\nconst RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nconst SCOPED_ABBR_TEST_RE = /\\((c|tm|r)\\)/i;\nconst SCOPED_ABBR_RE = /\\((c|tm|r)\\)/ig;\nconst SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  tm: '™'\n};\nfunction replaceFn(match, name) {\n  return SCOPED_ABBR[name.toLowerCase()];\n}\nfunction replace_scoped(inlineTokens) {\n  let inside_autolink = 0;\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i];\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n    }\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\nfunction replace_rare(inlineTokens) {\n  let inside_autolink = 0;\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i];\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content.replace(/\\+-/g, '±')\n        // .., ..., ....... -> …\n        // but ?..... & !..... -> ?.. & !..\n        .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..').replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n        // em-dash\n        .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\\u2014')\n        // en-dash\n        .replace(/(^|\\s)--(?=\\s|$)/mg, '$1\\u2013').replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, '$1\\u2013');\n      }\n    }\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\nfunction replace(state) {\n  let blkIdx;\n  if (!state.md.options.typographer) {\n    return;\n  }\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline') {\n      continue;\n    }\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children);\n    }\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children);\n    }\n  }\n}\n\n// Convert straight quotation marks to typographic ones\n//\n\nconst QUOTE_TEST_RE = /['\"]/;\nconst QUOTE_RE = /['\"]/g;\nconst APOSTROPHE = '\\u2019'; /* ’ */\n\nfunction replaceAt(str, index, ch) {\n  return str.slice(0, index) + ch + str.slice(index + 1);\n}\nfunction process_inlines(tokens, state) {\n  let j;\n  const stack = [];\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const thisLevel = tokens[i].level;\n    for (j = stack.length - 1; j >= 0; j--) {\n      if (stack[j].level <= thisLevel) {\n        break;\n      }\n    }\n    stack.length = j + 1;\n    if (token.type !== 'text') {\n      continue;\n    }\n    let text = token.content;\n    let pos = 0;\n    let max = text.length;\n\n    /* eslint no-labels:0,block-scoped-var:0 */\n    OUTER: while (pos < max) {\n      QUOTE_RE.lastIndex = pos;\n      const t = QUOTE_RE.exec(text);\n      if (!t) {\n        break;\n      }\n      let canOpen = true;\n      let canClose = true;\n      pos = t.index + 1;\n      const isSingle = t[0] === \"'\";\n\n      // Find previous character,\n      // default to space if it's the beginning of the line\n      //\n      let lastChar = 0x20;\n      if (t.index - 1 >= 0) {\n        lastChar = text.charCodeAt(t.index - 1);\n      } else {\n        for (j = i - 1; j >= 0; j--) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20\n          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n          break;\n        }\n      }\n\n      // Find next character,\n      // default to space if it's the end of the line\n      //\n      let nextChar = 0x20;\n      if (pos < max) {\n        nextChar = text.charCodeAt(pos);\n      } else {\n        for (j = i + 1; j < tokens.length; j++) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20\n          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          nextChar = tokens[j].content.charCodeAt(0);\n          break;\n        }\n      }\n      const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n      const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n      const isLastWhiteSpace = isWhiteSpace(lastChar);\n      const isNextWhiteSpace = isWhiteSpace(nextChar);\n      if (isNextWhiteSpace) {\n        canOpen = false;\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          canOpen = false;\n        }\n      }\n      if (isLastWhiteSpace) {\n        canClose = false;\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          canClose = false;\n        }\n      }\n      if (nextChar === 0x22 /* \" */ && t[0] === '\"') {\n        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {\n          // special case: 1\"\" - count first quote as an inch\n          canClose = canOpen = false;\n        }\n      }\n      if (canOpen && canClose) {\n        // Replace quotes in the middle of punctuation sequence, but not\n        // in the middle of the words, i.e.:\n        //\n        // 1. foo \" bar \" baz - not replaced\n        // 2. foo-\"-bar-\"-baz - replaced\n        // 3. foo\"bar\"baz     - not replaced\n        //\n        canOpen = isLastPunctChar;\n        canClose = isNextPunctChar;\n      }\n      if (!canOpen && !canClose) {\n        // middle of word\n        if (isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE);\n        }\n        continue;\n      }\n      if (canClose) {\n        // this could be a closing quote, rewind the stack to get a match\n        for (j = stack.length - 1; j >= 0; j--) {\n          let item = stack[j];\n          if (stack[j].level < thisLevel) {\n            break;\n          }\n          if (item.single === isSingle && stack[j].level === thisLevel) {\n            item = stack[j];\n            let openQuote;\n            let closeQuote;\n            if (isSingle) {\n              openQuote = state.md.options.quotes[2];\n              closeQuote = state.md.options.quotes[3];\n            } else {\n              openQuote = state.md.options.quotes[0];\n              closeQuote = state.md.options.quotes[1];\n            }\n\n            // replace token.content *before* tokens[item.token].content,\n            // because, if they are pointing at the same token, replaceAt\n            // could mess up indices when quote length != 1\n            token.content = replaceAt(token.content, t.index, closeQuote);\n            tokens[item.token].content = replaceAt(tokens[item.token].content, item.pos, openQuote);\n            pos += closeQuote.length - 1;\n            if (item.token === i) {\n              pos += openQuote.length - 1;\n            }\n            text = token.content;\n            max = text.length;\n            stack.length = j;\n            continue OUTER;\n          }\n        }\n      }\n      if (canOpen) {\n        stack.push({\n          token: i,\n          pos: t.index,\n          single: isSingle,\n          level: thisLevel\n        });\n      } else if (canClose && isSingle) {\n        token.content = replaceAt(token.content, t.index, APOSTROPHE);\n      }\n    }\n  }\n}\nfunction smartquotes(state) {\n  /* eslint max-depth:0 */\n  if (!state.md.options.typographer) {\n    return;\n  }\n  for (let blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline' || !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n      continue;\n    }\n    process_inlines(state.tokens[blkIdx].children, state);\n  }\n}\n\n// Join raw text tokens with the rest of the text\n//\n// This is set as a separate rule to provide an opportunity for plugins\n// to run text replacements after text join, but before escape join.\n//\n// For example, `\\:)` shouldn't be replaced with an emoji.\n//\n\nfunction text_join(state) {\n  let curr, last;\n  const blockTokens = state.tokens;\n  const l = blockTokens.length;\n  for (let j = 0; j < l; j++) {\n    if (blockTokens[j].type !== 'inline') continue;\n    const tokens = blockTokens[j].children;\n    const max = tokens.length;\n    for (curr = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text_special') {\n        tokens[curr].type = 'text';\n      }\n    }\n    for (curr = last = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text' && curr + 1 < max && tokens[curr + 1].type === 'text') {\n        // collapse two adjacent text nodes\n        tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n      } else {\n        if (curr !== last) {\n          tokens[last] = tokens[curr];\n        }\n        last++;\n      }\n    }\n    if (curr !== last) {\n      tokens.length = last;\n    }\n  }\n}\n\n/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n\nconst _rules$2 = [['normalize', normalize], ['block', block], ['inline', inline], ['linkify', linkify$1], ['replacements', replace], ['smartquotes', smartquotes],\n// `text_join` finds `text_special` tokens (for escape sequences)\n// and joins them with the rest of the text\n['text_join', text_join]];\n\n/**\n * new Core()\n **/\nfunction Core() {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler();\n  for (let i = 0; i < _rules$2.length; i++) {\n    this.ruler.push(_rules$2[i][0], _rules$2[i][1]);\n  }\n}\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  const rules = this.ruler.getRules('');\n  for (let i = 0, l = rules.length; i < l; i++) {\n    rules[i](state);\n  }\n};\nCore.prototype.State = StateCore;\n\n// Parser state class\n\nfunction StateBlock(src, md, env, tokens) {\n  this.src = src;\n\n  // link to parser instance\n  this.md = md;\n  this.env = env;\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens;\n  this.bMarks = []; // line begin offsets for fast jumps\n  this.eMarks = []; // line end offsets for fast jumps\n  this.tShift = []; // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = []; // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = [];\n\n  // block parser variables\n\n  // required block content indent (for example, if we are\n  // inside a list, it would be positioned after list marker)\n  this.blkIndent = 0;\n  this.line = 0; // line index in src\n  this.lineMax = 0; // lines count\n  this.tight = false; // loose/tight mode for lists\n  this.ddIndent = -1; // indent of the current dd block (-1 if there isn't any)\n  this.listIndent = -1; // indent of the current list block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root';\n  this.level = 0;\n\n  // Create caches\n  // Generate markers.\n  const s = this.src;\n  for (let start = 0, pos = 0, indent = 0, offset = 0, len = s.length, indent_found = false; pos < len; pos++) {\n    const ch = s.charCodeAt(pos);\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++;\n        if (ch === 0x09) {\n          offset += 4 - offset % 4;\n        } else {\n          offset++;\n        }\n        continue;\n      } else {\n        indent_found = true;\n      }\n    }\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) {\n        pos++;\n      }\n      this.bMarks.push(start);\n      this.eMarks.push(pos);\n      this.tShift.push(indent);\n      this.sCount.push(offset);\n      this.bsCount.push(0);\n      indent_found = false;\n      indent = 0;\n      offset = 0;\n      start = pos + 1;\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length);\n  this.eMarks.push(s.length);\n  this.tShift.push(0);\n  this.sCount.push(0);\n  this.bsCount.push(0);\n  this.lineMax = this.bMarks.length - 1; // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  const token = new Token(type, tag, nesting);\n  token.block = true;\n  if (nesting < 0) this.level--; // closing tag\n  token.level = this.level;\n  if (nesting > 0) this.level++; // opening tag\n\n  this.tokens.push(token);\n  return token;\n};\nStateBlock.prototype.isEmpty = function isEmpty(line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n};\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n  for (let max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break;\n    }\n  }\n  return from;\n};\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n  for (let max = this.src.length; pos < max; pos++) {\n    const ch = this.src.charCodeAt(pos);\n    if (!isSpace(ch)) {\n      break;\n    }\n  }\n  return pos;\n};\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n  if (pos <= min) {\n    return pos;\n  }\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) {\n      return pos + 1;\n    }\n  }\n  return pos;\n};\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars(pos, code) {\n  for (let max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) {\n      break;\n    }\n  }\n  return pos;\n};\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n  if (pos <= min) {\n    return pos;\n  }\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) {\n      return pos + 1;\n    }\n  }\n  return pos;\n};\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n  if (begin >= end) {\n    return '';\n  }\n  const queue = new Array(end - begin);\n  for (let i = 0, line = begin; line < end; line++, i++) {\n    let lineIndent = 0;\n    const lineStart = this.bMarks[line];\n    let first = lineStart;\n    let last;\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1;\n    } else {\n      last = this.eMarks[line];\n    }\n    while (first < last && lineIndent < indent) {\n      const ch = this.src.charCodeAt(first);\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n        } else {\n          lineIndent++;\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++;\n      } else {\n        break;\n      }\n      first++;\n    }\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);\n    } else {\n      queue[i] = this.src.slice(first, last);\n    }\n  }\n  return queue.join('');\n};\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token;\n\n// GFM table, https://github.github.com/gfm/#tables-extension-\n\nfunction getLine(state, line) {\n  const pos = state.bMarks[line] + state.tShift[line];\n  const max = state.eMarks[line];\n  return state.src.slice(pos, max);\n}\nfunction escapedSplit(str) {\n  const result = [];\n  const max = str.length;\n  let pos = 0;\n  let ch = str.charCodeAt(pos);\n  let isEscaped = false;\n  let lastPos = 0;\n  let current = '';\n  while (pos < max) {\n    if (ch === 0x7c /* | */) {\n      if (!isEscaped) {\n        // pipe separating cells, '|'\n        result.push(current + str.substring(lastPos, pos));\n        current = '';\n        lastPos = pos + 1;\n      } else {\n        // escaped pipe, '\\|'\n        current += str.substring(lastPos, pos - 1);\n        lastPos = pos;\n      }\n    }\n    isEscaped = ch === 0x5c /* \\ */;\n    pos++;\n    ch = str.charCodeAt(pos);\n  }\n  result.push(current + str.substring(lastPos));\n  return result;\n}\nfunction table(state, startLine, endLine, silent) {\n  // should have at least two lines\n  if (startLine + 2 > endLine) {\n    return false;\n  }\n  let nextLine = startLine + 1;\n  if (state.sCount[nextLine] < state.blkIndent) {\n    return false;\n  }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) {\n    return false;\n  }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  let pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) {\n    return false;\n  }\n  const firstCh = state.src.charCodeAt(pos++);\n  if (firstCh !== 0x7C /* | */ && firstCh !== 0x2D /* - */ && firstCh !== 0x3A /* : */) {\n    return false;\n  }\n  if (pos >= state.eMarks[nextLine]) {\n    return false;\n  }\n  const secondCh = state.src.charCodeAt(pos++);\n  if (secondCh !== 0x7C /* | */ && secondCh !== 0x2D /* - */ && secondCh !== 0x3A /* : */ && !isSpace(secondCh)) {\n    return false;\n  }\n\n  // if first character is '-', then second character must not be a space\n  // (due to parsing ambiguity with list)\n  if (firstCh === 0x2D /* - */ && isSpace(secondCh)) {\n    return false;\n  }\n  while (pos < state.eMarks[nextLine]) {\n    const ch = state.src.charCodeAt(pos);\n    if (ch !== 0x7C /* | */ && ch !== 0x2D /* - */ && ch !== 0x3A /* : */ && !isSpace(ch)) {\n      return false;\n    }\n    pos++;\n  }\n  let lineText = getLine(state, startLine + 1);\n  let columns = lineText.split('|');\n  const aligns = [];\n  for (let i = 0; i < columns.length; i++) {\n    const t = columns[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n    if (!/^:?-+:?$/.test(t)) {\n      return false;\n    }\n    if (t.charCodeAt(t.length - 1) === 0x3A /* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A /* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A /* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) {\n    return false;\n  }\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  columns = escapedSplit(lineText);\n  if (columns.length && columns[0] === '') columns.shift();\n  if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n  // header row will define an amount of columns in the entire table,\n  // and align row should be exactly the same (the rest of the rows can differ)\n  const columnCount = columns.length;\n  if (columnCount === 0 || columnCount !== aligns.length) {\n    return false;\n  }\n  if (silent) {\n    return true;\n  }\n  const oldParentType = state.parentType;\n  state.parentType = 'table';\n\n  // use 'blockquote' lists for termination because it's\n  // the most similar to tables\n  const terminatorRules = state.md.block.ruler.getRules('blockquote');\n  const token_to = state.push('table_open', 'table', 1);\n  const tableLines = [startLine, 0];\n  token_to.map = tableLines;\n  const token_tho = state.push('thead_open', 'thead', 1);\n  token_tho.map = [startLine, startLine + 1];\n  const token_htro = state.push('tr_open', 'tr', 1);\n  token_htro.map = [startLine, startLine + 1];\n  for (let i = 0; i < columns.length; i++) {\n    const token_ho = state.push('th_open', 'th', 1);\n    if (aligns[i]) {\n      token_ho.attrs = [['style', 'text-align:' + aligns[i]]];\n    }\n    const token_il = state.push('inline', '', 0);\n    token_il.content = columns[i].trim();\n    token_il.children = [];\n    state.push('th_close', 'th', -1);\n  }\n  state.push('tr_close', 'tr', -1);\n  state.push('thead_close', 'thead', -1);\n  let tbodyLines;\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) {\n      break;\n    }\n    let terminate = false;\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) {\n      break;\n    }\n    lineText = getLine(state, nextLine).trim();\n    if (!lineText) {\n      break;\n    }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      break;\n    }\n    columns = escapedSplit(lineText);\n    if (columns.length && columns[0] === '') columns.shift();\n    if (columns.length && columns[columns.length - 1] === '') columns.pop();\n    if (nextLine === startLine + 2) {\n      const token_tbo = state.push('tbody_open', 'tbody', 1);\n      token_tbo.map = tbodyLines = [startLine + 2, 0];\n    }\n    const token_tro = state.push('tr_open', 'tr', 1);\n    token_tro.map = [nextLine, nextLine + 1];\n    for (let i = 0; i < columnCount; i++) {\n      const token_tdo = state.push('td_open', 'td', 1);\n      if (aligns[i]) {\n        token_tdo.attrs = [['style', 'text-align:' + aligns[i]]];\n      }\n      const token_il = state.push('inline', '', 0);\n      token_il.content = columns[i] ? columns[i].trim() : '';\n      token_il.children = [];\n      state.push('td_close', 'td', -1);\n    }\n    state.push('tr_close', 'tr', -1);\n  }\n  if (tbodyLines) {\n    state.push('tbody_close', 'tbody', -1);\n    tbodyLines[1] = nextLine;\n  }\n  state.push('table_close', 'table', -1);\n  tableLines[1] = nextLine;\n  state.parentType = oldParentType;\n  state.line = nextLine;\n  return true;\n}\n\n// Code block (4 spaces padded)\n\nfunction code(state, startLine, endLine /*, silent */) {\n  if (state.sCount[startLine] - state.blkIndent < 4) {\n    return false;\n  }\n  let nextLine = startLine + 1;\n  let last = nextLine;\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      continue;\n    }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++;\n      last = nextLine;\n      continue;\n    }\n    break;\n  }\n  state.line = last;\n  const token = state.push('code_block', 'code', 0);\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\\n';\n  token.map = [startLine, state.line];\n  return true;\n}\n\n// fences (``` lang, ~~~ lang)\n\nfunction fence(state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  let max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  if (pos + 3 > max) {\n    return false;\n  }\n  const marker = state.src.charCodeAt(pos);\n  if (marker !== 0x7E /* ~ */ && marker !== 0x60 /* ` */) {\n    return false;\n  }\n\n  // scan marker length\n  let mem = pos;\n  pos = state.skipChars(pos, marker);\n  let len = pos - mem;\n  if (len < 3) {\n    return false;\n  }\n  const markup = state.src.slice(mem, pos);\n  const params = state.src.slice(pos, max);\n  if (marker === 0x60 /* ` */) {\n    if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n      return false;\n    }\n  }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) {\n    return true;\n  }\n\n  // search end of block\n  let nextLine = startLine;\n  let haveEndMarker = false;\n  for (;;) {\n    nextLine++;\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break;\n    }\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break;\n    }\n    if (state.src.charCodeAt(pos) !== marker) {\n      continue;\n    }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue;\n    }\n    pos = state.skipChars(pos, marker);\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) {\n      continue;\n    }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos);\n    if (pos < max) {\n      continue;\n    }\n    haveEndMarker = true;\n    // found!\n    break;\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine];\n  state.line = nextLine + (haveEndMarker ? 1 : 0);\n  const token = state.push('fence', 'code', 0);\n  token.info = params;\n  token.content = state.getLines(startLine + 1, nextLine, len, true);\n  token.markup = markup;\n  token.map = [startLine, state.line];\n  return true;\n}\n\n// Block quotes\n\nfunction blockquote(state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  let max = state.eMarks[startLine];\n  const oldLineMax = state.lineMax;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos) !== 0x3E /* > */) {\n    return false;\n  }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) {\n    return true;\n  }\n  const oldBMarks = [];\n  const oldBSCount = [];\n  const oldSCount = [];\n  const oldTShift = [];\n  const terminatorRules = state.md.block.ruler.getRules('blockquote');\n  const oldParentType = state.parentType;\n  state.parentType = 'blockquote';\n  let lastLineEmpty = false;\n  let nextLine;\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag:\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine; nextLine < endLine; nextLine++) {\n    // check if it's outdented, i.e. it's inside list item and indented\n    // less than said list item:\n    //\n    // ```\n    // 1. anything\n    //    > current blockquote\n    // 2. checking this line\n    // ```\n    const isOutdented = state.sCount[nextLine] < state.blkIndent;\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break;\n    }\n    if (state.src.charCodeAt(pos++) === 0x3E /* > */ && !isOutdented) {\n      // This line is inside the blockquote.\n\n      // set offset past spaces and \">\"\n      let initial = state.sCount[nextLine] + 1;\n      let spaceAfterMarker;\n      let adjustTab;\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n        // ' >   test '\n        //     ^ -- position start of line here:\n        pos++;\n        initial++;\n        adjustTab = false;\n        spaceAfterMarker = true;\n      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n        spaceAfterMarker = true;\n        if ((state.bsCount[nextLine] + initial) % 4 === 3) {\n          // '  >\\t  test '\n          //       ^ -- position start of line here (tab has width===1)\n          pos++;\n          initial++;\n          adjustTab = false;\n        } else {\n          // ' >\\t  test '\n          //    ^ -- position start of line here + shift bsCount slightly\n          //         to make extra space appear\n          adjustTab = true;\n        }\n      } else {\n        spaceAfterMarker = false;\n      }\n      let offset = initial;\n      oldBMarks.push(state.bMarks[nextLine]);\n      state.bMarks[nextLine] = pos;\n      while (pos < max) {\n        const ch = state.src.charCodeAt(pos);\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n          } else {\n            offset++;\n          }\n        } else {\n          break;\n        }\n        pos++;\n      }\n      lastLineEmpty = pos >= max;\n      oldBSCount.push(state.bsCount[nextLine]);\n      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n      oldSCount.push(state.sCount[nextLine]);\n      state.sCount[nextLine] = offset - initial;\n      oldTShift.push(state.tShift[nextLine]);\n      state.tShift[nextLine] = pos - state.bMarks[nextLine];\n      continue;\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) {\n      break;\n    }\n\n    // Case 3: another tag found.\n    let terminate = false;\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) {\n      // Quirk to enforce \"hard termination mode\" for paragraphs;\n      // normally if you call `tokenize(state, startLine, nextLine)`,\n      // paragraphs will look below nextLine for paragraph continuation,\n      // but if blockquote is terminated by another tag, they shouldn't\n      state.lineMax = nextLine;\n      if (state.blkIndent !== 0) {\n        // state.blkIndent was non-zero, we now set it to zero,\n        // so we need to re-calculate all offsets to appear as\n        // if indent wasn't changed\n        oldBMarks.push(state.bMarks[nextLine]);\n        oldBSCount.push(state.bsCount[nextLine]);\n        oldTShift.push(state.tShift[nextLine]);\n        oldSCount.push(state.sCount[nextLine]);\n        state.sCount[nextLine] -= state.blkIndent;\n      }\n      break;\n    }\n    oldBMarks.push(state.bMarks[nextLine]);\n    oldBSCount.push(state.bsCount[nextLine]);\n    oldTShift.push(state.tShift[nextLine]);\n    oldSCount.push(state.sCount[nextLine]);\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1;\n  }\n  const oldIndent = state.blkIndent;\n  state.blkIndent = 0;\n  const token_o = state.push('blockquote_open', 'blockquote', 1);\n  token_o.markup = '>';\n  const lines = [startLine, 0];\n  token_o.map = lines;\n  state.md.block.tokenize(state, startLine, nextLine);\n  const token_c = state.push('blockquote_close', 'blockquote', -1);\n  token_c.markup = '>';\n  state.lineMax = oldLineMax;\n  state.parentType = oldParentType;\n  lines[1] = state.line;\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (let i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i];\n    state.tShift[i + startLine] = oldTShift[i];\n    state.sCount[i + startLine] = oldSCount[i];\n    state.bsCount[i + startLine] = oldBSCount[i];\n  }\n  state.blkIndent = oldIndent;\n  return true;\n}\n\n// Horizontal rule\n\nfunction hr(state, startLine, endLine, silent) {\n  const max = state.eMarks[startLine];\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  const marker = state.src.charCodeAt(pos++);\n\n  // Check hr marker\n  if (marker !== 0x2A /* * */ && marker !== 0x2D /* - */ && marker !== 0x5F /* _ */) {\n    return false;\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  let cnt = 1;\n  while (pos < max) {\n    const ch = state.src.charCodeAt(pos++);\n    if (ch !== marker && !isSpace(ch)) {\n      return false;\n    }\n    if (ch === marker) {\n      cnt++;\n    }\n  }\n  if (cnt < 3) {\n    return false;\n  }\n  if (silent) {\n    return true;\n  }\n  state.line = startLine + 1;\n  const token = state.push('hr', 'hr', 0);\n  token.map = [startLine, state.line];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n  return true;\n}\n\n// Lists\n\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker(state, startLine) {\n  const max = state.eMarks[startLine];\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  const marker = state.src.charCodeAt(pos++);\n  // Check bullet\n  if (marker !== 0x2A /* * */ && marker !== 0x2D /* - */ && marker !== 0x2B /* + */) {\n    return -1;\n  }\n  if (pos < max) {\n    const ch = state.src.charCodeAt(pos);\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1;\n    }\n  }\n  return pos;\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker(state, startLine) {\n  const start = state.bMarks[startLine] + state.tShift[startLine];\n  const max = state.eMarks[startLine];\n  let pos = start;\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) {\n    return -1;\n  }\n  let ch = state.src.charCodeAt(pos++);\n  if (ch < 0x30 /* 0 */ || ch > 0x39 /* 9 */) {\n    return -1;\n  }\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) {\n      return -1;\n    }\n    ch = state.src.charCodeAt(pos++);\n    if (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) {\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) {\n        return -1;\n      }\n      continue;\n    }\n\n    // found valid marker\n    if (ch === 0x29 /* ) */ || ch === 0x2e /* . */) {\n      break;\n    }\n    return -1;\n  }\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1;\n    }\n  }\n  return pos;\n}\nfunction markTightParagraphs(state, idx) {\n  const level = state.level + 2;\n  for (let i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true;\n      state.tokens[i].hidden = true;\n      i += 2;\n    }\n  }\n}\nfunction list(state, startLine, endLine, silent) {\n  let max, pos, start, token;\n  let nextLine = startLine;\n  let tight = true;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) {\n    return false;\n  }\n\n  // Special case:\n  //  - item 1\n  //   - item 2\n  //    - item 3\n  //     - item 4\n  //      - this one is a paragraph continuation\n  if (state.listIndent >= 0 && state.sCount[nextLine] - state.listIndent >= 4 && state.sCount[nextLine] < state.blkIndent) {\n    return false;\n  }\n  let isTerminatingParagraph = false;\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      isTerminatingParagraph = true;\n    }\n  }\n\n  // Detect list type and position after marker\n  let isOrdered;\n  let markerValue;\n  let posAfterMarker;\n  if ((posAfterMarker = skipOrderedListMarker(state, nextLine)) >= 0) {\n    isOrdered = true;\n    start = state.bMarks[nextLine] + state.tShift[nextLine];\n    markerValue = Number(state.src.slice(start, posAfterMarker - 1));\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false;\n  } else if ((posAfterMarker = skipBulletListMarker(state, nextLine)) >= 0) {\n    isOrdered = false;\n  } else {\n    return false;\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[nextLine]) return false;\n  }\n\n  // For validation mode we can terminate immediately\n  if (silent) {\n    return true;\n  }\n\n  // We should terminate list on style change. Remember first one to compare.\n  const markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n\n  // Start list\n  const listTokIdx = state.tokens.length;\n  if (isOrdered) {\n    token = state.push('ordered_list_open', 'ol', 1);\n    if (markerValue !== 1) {\n      token.attrs = [['start', markerValue]];\n    }\n  } else {\n    token = state.push('bullet_list_open', 'ul', 1);\n  }\n  const listLines = [nextLine, 0];\n  token.map = listLines;\n  token.markup = String.fromCharCode(markerCharCode);\n\n  //\n  // Iterate list items\n  //\n\n  let prevEmptyEnd = false;\n  const terminatorRules = state.md.block.ruler.getRules('list');\n  const oldParentType = state.parentType;\n  state.parentType = 'list';\n  while (nextLine < endLine) {\n    pos = posAfterMarker;\n    max = state.eMarks[nextLine];\n    const initial = state.sCount[nextLine] + posAfterMarker - (state.bMarks[nextLine] + state.tShift[nextLine]);\n    let offset = initial;\n    while (pos < max) {\n      const ch = state.src.charCodeAt(pos);\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n      } else if (ch === 0x20) {\n        offset++;\n      } else {\n        break;\n      }\n      pos++;\n    }\n    const contentStart = pos;\n    let indentAfterMarker;\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1;\n    } else {\n      indentAfterMarker = offset - initial;\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) {\n      indentAfterMarker = 1;\n    }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    const indent = initial + indentAfterMarker;\n\n    // Run subparser & write tokens\n    token = state.push('list_item_open', 'li', 1);\n    token.markup = String.fromCharCode(markerCharCode);\n    const itemLines = [nextLine, 0];\n    token.map = itemLines;\n    if (isOrdered) {\n      token.info = state.src.slice(start, posAfterMarker - 1);\n    }\n\n    // change current state, then restore it after parser subcall\n    const oldTight = state.tight;\n    const oldTShift = state.tShift[nextLine];\n    const oldSCount = state.sCount[nextLine];\n\n    //  - example list\n    // ^ listIndent position will be here\n    //   ^ blkIndent position will be here\n    //\n    const oldListIndent = state.listIndent;\n    state.listIndent = state.blkIndent;\n    state.blkIndent = indent;\n    state.tight = true;\n    state.tShift[nextLine] = contentStart - state.bMarks[nextLine];\n    state.sCount[nextLine] = offset;\n    if (contentStart >= max && state.isEmpty(nextLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine);\n    } else {\n      state.md.block.tokenize(state, nextLine, endLine, true);\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false;\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = state.line - nextLine > 1 && state.isEmpty(state.line - 1);\n    state.blkIndent = state.listIndent;\n    state.listIndent = oldListIndent;\n    state.tShift[nextLine] = oldTShift;\n    state.sCount[nextLine] = oldSCount;\n    state.tight = oldTight;\n    token = state.push('list_item_close', 'li', -1);\n    token.markup = String.fromCharCode(markerCharCode);\n    nextLine = state.line;\n    itemLines[1] = nextLine;\n    if (nextLine >= endLine) {\n      break;\n    }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) {\n      break;\n    }\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      break;\n    }\n\n    // fail if terminating block found\n    let terminate = false;\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) {\n      break;\n    }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine);\n      if (posAfterMarker < 0) {\n        break;\n      }\n      start = state.bMarks[nextLine] + state.tShift[nextLine];\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine);\n      if (posAfterMarker < 0) {\n        break;\n      }\n    }\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {\n      break;\n    }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1);\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1);\n  }\n  token.markup = String.fromCharCode(markerCharCode);\n  listLines[1] = nextLine;\n  state.line = nextLine;\n  state.parentType = oldParentType;\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx);\n  }\n  return true;\n}\n\nfunction reference(state, startLine, _endLine, silent) {\n  let lines = 0;\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  let max = state.eMarks[startLine];\n  let nextLine = startLine + 1;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  if (state.src.charCodeAt(pos) !== 0x5B /* [ */) {\n    return false;\n  }\n\n  // Simple check to quickly interrupt scan on [link](url) at the start of line.\n  // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54\n  while (++pos < max) {\n    if (state.src.charCodeAt(pos) === 0x5D /* ] */ && state.src.charCodeAt(pos - 1) !== 0x5C /* \\ */) {\n      if (pos + 1 === max) {\n        return false;\n      }\n      if (state.src.charCodeAt(pos + 1) !== 0x3A /* : */) {\n        return false;\n      }\n      break;\n    }\n  }\n  const endLine = state.lineMax;\n\n  // jump line-by-line until empty one or EOF\n  const terminatorRules = state.md.block.ruler.getRules('reference');\n  const oldParentType = state.parentType;\n  state.parentType = 'reference';\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) {\n      continue;\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) {\n      continue;\n    }\n\n    // Some tags can terminate paragraph without empty line.\n    let terminate = false;\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) {\n      break;\n    }\n  }\n  const str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  max = str.length;\n  let labelEnd = -1;\n  for (pos = 1; pos < max; pos++) {\n    const ch = str.charCodeAt(pos);\n    if (ch === 0x5B /* [ */) {\n      return false;\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos;\n      break;\n    } else if (ch === 0x0A /* \\n */) {\n      lines++;\n    } else if (ch === 0x5C /* \\ */) {\n      pos++;\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n  }\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A /* : */) {\n    return false;\n  }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    const ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) ; else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  const destRes = state.md.helpers.parseLinkDestination(str, pos, max);\n  if (!destRes.ok) {\n    return false;\n  }\n  const href = state.md.normalizeLink(destRes.str);\n  if (!state.md.validateLink(href)) {\n    return false;\n  }\n  pos = destRes.pos;\n  lines += destRes.lines;\n\n  // save cursor state, we could require to rollback later\n  const destEndPos = pos;\n  const destEndLineNo = lines;\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  const start = pos;\n  for (; pos < max; pos++) {\n    const ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) ; else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  const titleRes = state.md.helpers.parseLinkTitle(str, pos, max);\n  let title;\n  if (pos < max && start !== pos && titleRes.ok) {\n    title = titleRes.str;\n    pos = titleRes.pos;\n    lines += titleRes.lines;\n  } else {\n    title = '';\n    pos = destEndPos;\n    lines = destEndLineNo;\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    const ch = str.charCodeAt(pos);\n    if (!isSpace(ch)) {\n      break;\n    }\n    pos++;\n  }\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = '';\n      pos = destEndPos;\n      lines = destEndLineNo;\n      while (pos < max) {\n        const ch = str.charCodeAt(pos);\n        if (!isSpace(ch)) {\n          break;\n        }\n        pos++;\n      }\n    }\n  }\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false;\n  }\n  const label = normalizeReference(str.slice(1, labelEnd));\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false;\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /* istanbul ignore if */\n  if (silent) {\n    return true;\n  }\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {};\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = {\n      title,\n      href\n    };\n  }\n  state.parentType = oldParentType;\n  state.line = startLine + lines + 1;\n  return true;\n}\n\n// List of valid html blocks names, according to commonmark spec\n// https://spec.commonmark.org/0.30/#html-blocks\n\nvar block_names = ['address', 'article', 'aside', 'base', 'basefont', 'blockquote', 'body', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dialog', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hr', 'html', 'iframe', 'legend', 'li', 'link', 'main', 'menu', 'menuitem', 'nav', 'noframes', 'ol', 'optgroup', 'option', 'p', 'param', 'section', 'source', 'summary', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul'];\n\n// Regexps to match html elements\n\nconst attr_name = '[a-zA-Z_:][a-zA-Z0-9:._-]*';\nconst unquoted = '[^\"\\'=<>`\\\\x00-\\\\x20]+';\nconst single_quoted = \"'[^']*'\";\nconst double_quoted = '\"[^\"]*\"';\nconst attr_value = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';\nconst attribute = '(?:\\\\s+' + attr_name + '(?:\\\\s*=\\\\s*' + attr_value + ')?)';\nconst open_tag = '<[A-Za-z][A-Za-z0-9\\\\-]*' + attribute + '*\\\\s*\\\\/?>';\nconst close_tag = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>';\nconst comment = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';\nconst processing = '<[?][\\\\s\\\\S]*?[?]>';\nconst declaration = '<![A-Z]+\\\\s+[^>]*>';\nconst cdata = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>';\nconst HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment + '|' + processing + '|' + declaration + '|' + cdata + ')');\nconst HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');\n\n// HTML block\n\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nconst HTML_SEQUENCES = [[/^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true], [/^<!--/, /-->/, true], [/^<\\?/, /\\?>/, true], [/^<![A-Z]/, />/, true], [/^<!\\[CDATA\\[/, /\\]\\]>/, true], [new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true], [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'), /^$/, false]];\nfunction html_block(state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  let max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  if (!state.md.options.html) {\n    return false;\n  }\n  if (state.src.charCodeAt(pos) !== 0x3C /* < */) {\n    return false;\n  }\n  let lineText = state.src.slice(pos, max);\n  let i = 0;\n  for (; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) {\n      break;\n    }\n  }\n  if (i === HTML_SEQUENCES.length) {\n    return false;\n  }\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2];\n  }\n  let nextLine = startLine + 1;\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) {\n        break;\n      }\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      lineText = state.src.slice(pos, max);\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) {\n          nextLine++;\n        }\n        break;\n      }\n    }\n  }\n  state.line = nextLine;\n  const token = state.push('html_block', '', 0);\n  token.map = [startLine, nextLine];\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n  return true;\n}\n\n// heading (#, ##, ...)\n\nfunction heading(state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  let max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  let ch = state.src.charCodeAt(pos);\n  if (ch !== 0x23 /* # */ || pos >= max) {\n    return false;\n  }\n\n  // count heading level\n  let level = 1;\n  ch = state.src.charCodeAt(++pos);\n  while (ch === 0x23 /* # */ && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n  if (level > 6 || pos < max && !isSpace(ch)) {\n    return false;\n  }\n  if (silent) {\n    return true;\n  }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos);\n  const tmp = state.skipCharsBack(max, 0x23, pos); // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp;\n  }\n  state.line = startLine + 1;\n  const token_o = state.push('heading_open', 'h' + String(level), 1);\n  token_o.markup = '########'.slice(0, level);\n  token_o.map = [startLine, state.line];\n  const token_i = state.push('inline', '', 0);\n  token_i.content = state.src.slice(pos, max).trim();\n  token_i.map = [startLine, state.line];\n  token_i.children = [];\n  const token_c = state.push('heading_close', 'h' + String(level), -1);\n  token_c.markup = '########'.slice(0, level);\n  return true;\n}\n\n// lheading (---, ===)\n\nfunction lheading(state, startLine, endLine /*, silent */) {\n  const terminatorRules = state.md.block.ruler.getRules('paragraph');\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  const oldParentType = state.parentType;\n  state.parentType = 'paragraph'; // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  let level = 0;\n  let marker;\n  let nextLine = startLine + 1;\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) {\n      continue;\n    }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      let pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      const max = state.eMarks[nextLine];\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos);\n        if (marker === 0x2D /* - */ || marker === 0x3D /* = */) {\n          pos = state.skipChars(pos, marker);\n          pos = state.skipSpaces(pos);\n          if (pos >= max) {\n            level = marker === 0x3D /* = */ ? 1 : 2;\n            break;\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) {\n      continue;\n    }\n\n    // Some tags can terminate paragraph without empty line.\n    let terminate = false;\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) {\n      break;\n    }\n  }\n  if (!level) {\n    // Didn't find valid underline\n    return false;\n  }\n  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  state.line = nextLine + 1;\n  const token_o = state.push('heading_open', 'h' + String(level), 1);\n  token_o.markup = String.fromCharCode(marker);\n  token_o.map = [startLine, state.line];\n  const token_i = state.push('inline', '', 0);\n  token_i.content = content;\n  token_i.map = [startLine, state.line - 1];\n  token_i.children = [];\n  const token_c = state.push('heading_close', 'h' + String(level), -1);\n  token_c.markup = String.fromCharCode(marker);\n  state.parentType = oldParentType;\n  return true;\n}\n\n// Paragraph\n\nfunction paragraph(state, startLine, endLine) {\n  const terminatorRules = state.md.block.ruler.getRules('paragraph');\n  const oldParentType = state.parentType;\n  let nextLine = startLine + 1;\n  state.parentType = 'paragraph';\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) {\n      continue;\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) {\n      continue;\n    }\n\n    // Some tags can terminate paragraph without empty line.\n    let terminate = false;\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) {\n      break;\n    }\n  }\n  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  state.line = nextLine;\n  const token_o = state.push('paragraph_open', 'p', 1);\n  token_o.map = [startLine, state.line];\n  const token_i = state.push('inline', '', 0);\n  token_i.content = content;\n  token_i.map = [startLine, state.line];\n  token_i.children = [];\n  state.push('paragraph_close', 'p', -1);\n  state.parentType = oldParentType;\n  return true;\n}\n\n/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n\nconst _rules$1 = [\n// First 2 params - rule name & source. Secondary array - list of rules,\n// which can be terminated by this one.\n['table', table, ['paragraph', 'reference']], ['code', code], ['fence', fence, ['paragraph', 'reference', 'blockquote', 'list']], ['blockquote', blockquote, ['paragraph', 'reference', 'blockquote', 'list']], ['hr', hr, ['paragraph', 'reference', 'blockquote', 'list']], ['list', list, ['paragraph', 'reference', 'blockquote']], ['reference', reference], ['html_block', html_block, ['paragraph', 'reference', 'blockquote']], ['heading', heading, ['paragraph', 'reference', 'blockquote']], ['lheading', lheading], ['paragraph', paragraph]];\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock() {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler();\n  for (let i = 0; i < _rules$1.length; i++) {\n    this.ruler.push(_rules$1[i][0], _rules$1[i][1], {\n      alt: (_rules$1[i][2] || []).slice()\n    });\n  }\n}\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  const rules = this.ruler.getRules('');\n  const len = rules.length;\n  const maxNesting = state.md.options.maxNesting;\n  let line = startLine;\n  let hasEmptyLines = false;\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line);\n    if (line >= endLine) {\n      break;\n    }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) {\n      break;\n    }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine;\n      break;\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n    const prevLine = state.line;\n    let ok = false;\n    for (let i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false);\n      if (ok) {\n        if (prevLine >= state.line) {\n          throw new Error(\"block rule didn't increment state.line\");\n        }\n        break;\n      }\n    }\n\n    // this can only happen if user disables paragraph rule\n    if (!ok) throw new Error('none of the block rules matched');\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines;\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true;\n    }\n    line = state.line;\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true;\n      line++;\n      state.line = line;\n    }\n  }\n};\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  if (!src) {\n    return;\n  }\n  const state = new this.State(src, md, env, outTokens);\n  this.tokenize(state, state.line, state.lineMax);\n};\nParserBlock.prototype.State = StateBlock;\n\n// Inline parser state\n\nfunction StateInline(src, md, env, outTokens) {\n  this.src = src;\n  this.env = env;\n  this.md = md;\n  this.tokens = outTokens;\n  this.tokens_meta = Array(outTokens.length);\n  this.pos = 0;\n  this.posMax = this.src.length;\n  this.level = 0;\n  this.pending = '';\n  this.pendingLevel = 0;\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {};\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = [];\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = [];\n\n  // backtick length => last seen position\n  this.backticks = {};\n  this.backticksScanned = false;\n\n  // Counter used to disable inline linkify-it execution\n  // inside <a> and markdown links\n  this.linkLevel = 0;\n}\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  const token = new Token('text', '', 0);\n  token.content = this.pending;\n  token.level = this.pendingLevel;\n  this.tokens.push(token);\n  this.pending = '';\n  return token;\n};\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending();\n  }\n  const token = new Token(type, tag, nesting);\n  let token_meta = null;\n  if (nesting < 0) {\n    // closing tag\n    this.level--;\n    this.delimiters = this._prev_delimiters.pop();\n  }\n  token.level = this.level;\n  if (nesting > 0) {\n    // opening tag\n    this.level++;\n    this._prev_delimiters.push(this.delimiters);\n    this.delimiters = [];\n    token_meta = {\n      delimiters: this.delimiters\n    };\n  }\n  this.pendingLevel = this.level;\n  this.tokens.push(token);\n  this.tokens_meta.push(token_meta);\n  return token;\n};\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  let can_open, can_close;\n  let left_flanking = true;\n  let right_flanking = true;\n  const max = this.posMax;\n  const marker = this.src.charCodeAt(start);\n\n  // treat beginning of the line as a whitespace\n  const lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n  let pos = start;\n  while (pos < max && this.src.charCodeAt(pos) === marker) {\n    pos++;\n  }\n  const count = pos - start;\n\n  // treat end of the line as a whitespace\n  const nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n  const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n  const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n  const isLastWhiteSpace = isWhiteSpace(lastChar);\n  const isNextWhiteSpace = isWhiteSpace(nextChar);\n  if (isNextWhiteSpace) {\n    left_flanking = false;\n  } else if (isNextPunctChar) {\n    if (!(isLastWhiteSpace || isLastPunctChar)) {\n      left_flanking = false;\n    }\n  }\n  if (isLastWhiteSpace) {\n    right_flanking = false;\n  } else if (isLastPunctChar) {\n    if (!(isNextWhiteSpace || isNextPunctChar)) {\n      right_flanking = false;\n    }\n  }\n  if (!canSplitWord) {\n    can_open = left_flanking && (!right_flanking || isLastPunctChar);\n    can_close = right_flanking && (!left_flanking || isNextPunctChar);\n  } else {\n    can_open = left_flanking;\n    can_close = right_flanking;\n  }\n  return {\n    can_open,\n    can_close,\n    length: count\n  };\n};\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token;\n\n// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar(ch) {\n  switch (ch) {\n    case 0x0A /* \\n */:\n    case 0x21 /* ! */:\n    case 0x23 /* # */:\n    case 0x24 /* $ */:\n    case 0x25 /* % */:\n    case 0x26 /* & */:\n    case 0x2A /* * */:\n    case 0x2B /* + */:\n    case 0x2D /* - */:\n    case 0x3A /* : */:\n    case 0x3C /* < */:\n    case 0x3D /* = */:\n    case 0x3E /* > */:\n    case 0x40 /* @ */:\n    case 0x5B /* [ */:\n    case 0x5C /* \\ */:\n    case 0x5D /* ] */:\n    case 0x5E /* ^ */:\n    case 0x5F /* _ */:\n    case 0x60 /* ` */:\n    case 0x7B /* { */:\n    case 0x7D /* } */:\n    case 0x7E /* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\nfunction text(state, silent) {\n  let pos = state.pos;\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n  if (pos === state.pos) {\n    return false;\n  }\n  if (!silent) {\n    state.pending += state.src.slice(state.pos, pos);\n  }\n  state.pos = pos;\n  return true;\n}\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParcerInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n}; */\n\n// Process links like https://example.org/\n\n// RFC3986: scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nconst SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i;\nfunction linkify(state, silent) {\n  if (!state.md.options.linkify) return false;\n  if (state.linkLevel > 0) return false;\n  const pos = state.pos;\n  const max = state.posMax;\n  if (pos + 3 > max) return false;\n  if (state.src.charCodeAt(pos) !== 0x3A /* : */) return false;\n  if (state.src.charCodeAt(pos + 1) !== 0x2F /* / */) return false;\n  if (state.src.charCodeAt(pos + 2) !== 0x2F /* / */) return false;\n  const match = state.pending.match(SCHEME_RE);\n  if (!match) return false;\n  const proto = match[1];\n  const link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length));\n  if (!link) return false;\n  let url = link.url;\n\n  // invalid link, but still detected by linkify somehow;\n  // need to check to prevent infinite loop below\n  if (url.length <= proto.length) return false;\n\n  // disallow '*' at the end of the link (conflicts with emphasis)\n  url = url.replace(/\\*+$/, '');\n  const fullUrl = state.md.normalizeLink(url);\n  if (!state.md.validateLink(fullUrl)) return false;\n  if (!silent) {\n    state.pending = state.pending.slice(0, -proto.length);\n    const token_o = state.push('link_open', 'a', 1);\n    token_o.attrs = [['href', fullUrl]];\n    token_o.markup = 'linkify';\n    token_o.info = 'auto';\n    const token_t = state.push('text', '', 0);\n    token_t.content = state.md.normalizeLinkText(url);\n    const token_c = state.push('link_close', 'a', -1);\n    token_c.markup = 'linkify';\n    token_c.info = 'auto';\n  }\n  state.pos += url.length - proto.length;\n  return true;\n}\n\n// Proceess '\\n'\n\nfunction newline(state, silent) {\n  let pos = state.pos;\n  if (state.src.charCodeAt(pos) !== 0x0A /* \\n */) {\n    return false;\n  }\n  const pmax = state.pending.length - 1;\n  const max = state.posMax;\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        // Find whitespaces tail of pending chars.\n        let ws = pmax - 1;\n        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--;\n        state.pending = state.pending.slice(0, ws);\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n  pos++;\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n  state.pos = pos;\n  return true;\n}\n\n// Process escaped chars and hardbreaks\n\nconst ESCAPED = [];\nfor (let i = 0; i < 256; i++) {\n  ESCAPED.push(0);\n}\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'.split('').forEach(function (ch) {\n  ESCAPED[ch.charCodeAt(0)] = 1;\n});\nfunction escape(state, silent) {\n  let pos = state.pos;\n  const max = state.posMax;\n  if (state.src.charCodeAt(pos) !== 0x5C /* \\ */) return false;\n  pos++;\n\n  // '\\' at the end of the inline block\n  if (pos >= max) return false;\n  let ch1 = state.src.charCodeAt(pos);\n  if (ch1 === 0x0A) {\n    if (!silent) {\n      state.push('hardbreak', 'br', 0);\n    }\n    pos++;\n    // skip leading whitespaces from next line\n    while (pos < max) {\n      ch1 = state.src.charCodeAt(pos);\n      if (!isSpace(ch1)) break;\n      pos++;\n    }\n    state.pos = pos;\n    return true;\n  }\n  let escapedStr = state.src[pos];\n  if (ch1 >= 0xD800 && ch1 <= 0xDBFF && pos + 1 < max) {\n    const ch2 = state.src.charCodeAt(pos + 1);\n    if (ch2 >= 0xDC00 && ch2 <= 0xDFFF) {\n      escapedStr += state.src[pos + 1];\n      pos++;\n    }\n  }\n  const origStr = '\\\\' + escapedStr;\n  if (!silent) {\n    const token = state.push('text_special', '', 0);\n    if (ch1 < 256 && ESCAPED[ch1] !== 0) {\n      token.content = escapedStr;\n    } else {\n      token.content = origStr;\n    }\n    token.markup = origStr;\n    token.info = 'escape';\n  }\n  state.pos = pos + 1;\n  return true;\n}\n\n// Parse backticks\n\nfunction backtick(state, silent) {\n  let pos = state.pos;\n  const ch = state.src.charCodeAt(pos);\n  if (ch !== 0x60 /* ` */) {\n    return false;\n  }\n  const start = pos;\n  pos++;\n  const max = state.posMax;\n\n  // scan marker length\n  while (pos < max && state.src.charCodeAt(pos) === 0x60 /* ` */) {\n    pos++;\n  }\n  const marker = state.src.slice(start, pos);\n  const openerLength = marker.length;\n  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n    if (!silent) state.pending += marker;\n    state.pos += openerLength;\n    return true;\n  }\n  let matchEnd = pos;\n  let matchStart;\n\n  // Nothing found in the cache, scan until the end of the line (or until marker is found)\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    // scan marker length\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60 /* ` */) {\n      matchEnd++;\n    }\n    const closerLength = matchEnd - matchStart;\n    if (closerLength === openerLength) {\n      // Found matching closer length.\n      if (!silent) {\n        const token = state.push('code_inline', 'code', 0);\n        token.markup = marker;\n        token.content = state.src.slice(pos, matchStart).replace(/\\n/g, ' ').replace(/^ (.+) $/, '$1');\n      }\n      state.pos = matchEnd;\n      return true;\n    }\n\n    // Some different length found, put it in cache as upper limit of where closer can be found\n    state.backticks[closerLength] = matchStart;\n  }\n\n  // Scanned through the end, didn't find anything\n  state.backticksScanned = true;\n  if (!silent) state.pending += marker;\n  state.pos += openerLength;\n  return true;\n}\n\n// ~~strike through~~\n//\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nfunction strikethrough_tokenize(state, silent) {\n  const start = state.pos;\n  const marker = state.src.charCodeAt(start);\n  if (silent) {\n    return false;\n  }\n  if (marker !== 0x7E /* ~ */) {\n    return false;\n  }\n  const scanned = state.scanDelims(state.pos, true);\n  let len = scanned.length;\n  const ch = String.fromCharCode(marker);\n  if (len < 2) {\n    return false;\n  }\n  let token;\n  if (len % 2) {\n    token = state.push('text', '', 0);\n    token.content = ch;\n    len--;\n  }\n  for (let i = 0; i < len; i += 2) {\n    token = state.push('text', '', 0);\n    token.content = ch + ch;\n    state.delimiters.push({\n      marker,\n      length: 0,\n      // disable \"rule of 3\" length checks meant for emphasis\n      token: state.tokens.length - 1,\n      end: -1,\n      open: scanned.can_open,\n      close: scanned.can_close\n    });\n  }\n  state.pos += scanned.length;\n  return true;\n}\nfunction postProcess$1(state, delimiters) {\n  let token;\n  const loneMarkers = [];\n  const max = delimiters.length;\n  for (let i = 0; i < max; i++) {\n    const startDelim = delimiters[i];\n    if (startDelim.marker !== 0x7E /* ~ */) {\n      continue;\n    }\n    if (startDelim.end === -1) {\n      continue;\n    }\n    const endDelim = delimiters[startDelim.end];\n    token = state.tokens[startDelim.token];\n    token.type = 's_open';\n    token.tag = 's';\n    token.nesting = 1;\n    token.markup = '~~';\n    token.content = '';\n    token = state.tokens[endDelim.token];\n    token.type = 's_close';\n    token.tag = 's';\n    token.nesting = -1;\n    token.markup = '~~';\n    token.content = '';\n    if (state.tokens[endDelim.token - 1].type === 'text' && state.tokens[endDelim.token - 1].content === '~') {\n      loneMarkers.push(endDelim.token - 1);\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    const i = loneMarkers.pop();\n    let j = i + 1;\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++;\n    }\n    j--;\n    if (i !== j) {\n      token = state.tokens[j];\n      state.tokens[j] = state.tokens[i];\n      state.tokens[i] = token;\n    }\n  }\n}\n\n// Walk through delimiter list and replace text tokens with tags\n//\nfunction strikethrough_postProcess(state) {\n  const tokens_meta = state.tokens_meta;\n  const max = state.tokens_meta.length;\n  postProcess$1(state, state.delimiters);\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess$1(state, tokens_meta[curr].delimiters);\n    }\n  }\n}\nvar r_strikethrough = {\n  tokenize: strikethrough_tokenize,\n  postProcess: strikethrough_postProcess\n};\n\n// Process *this* and _that_\n//\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nfunction emphasis_tokenize(state, silent) {\n  const start = state.pos;\n  const marker = state.src.charCodeAt(start);\n  if (silent) {\n    return false;\n  }\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) {\n    return false;\n  }\n  const scanned = state.scanDelims(state.pos, marker === 0x2A);\n  for (let i = 0; i < scanned.length; i++) {\n    const token = state.push('text', '', 0);\n    token.content = String.fromCharCode(marker);\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker,\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n      // A position of the token this delimiter corresponds to.\n      //\n      token: state.tokens.length - 1,\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end: -1,\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open: scanned.can_open,\n      close: scanned.can_close\n    });\n  }\n  state.pos += scanned.length;\n  return true;\n}\nfunction postProcess(state, delimiters) {\n  const max = delimiters.length;\n  for (let i = max - 1; i >= 0; i--) {\n    const startDelim = delimiters[i];\n    if (startDelim.marker !== 0x5F /* _ */ && startDelim.marker !== 0x2A /* * */) {\n      continue;\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue;\n    }\n    const endDelim = delimiters[startDelim.end];\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    const isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 &&\n    // check that first two markers match and adjacent\n    delimiters[i - 1].marker === startDelim.marker && delimiters[i - 1].token === startDelim.token - 1 &&\n    // check that last two markers are adjacent (we can safely assume they match)\n    delimiters[startDelim.end + 1].token === endDelim.token + 1;\n    const ch = String.fromCharCode(startDelim.marker);\n    const token_o = state.tokens[startDelim.token];\n    token_o.type = isStrong ? 'strong_open' : 'em_open';\n    token_o.tag = isStrong ? 'strong' : 'em';\n    token_o.nesting = 1;\n    token_o.markup = isStrong ? ch + ch : ch;\n    token_o.content = '';\n    const token_c = state.tokens[endDelim.token];\n    token_c.type = isStrong ? 'strong_close' : 'em_close';\n    token_c.tag = isStrong ? 'strong' : 'em';\n    token_c.nesting = -1;\n    token_c.markup = isStrong ? ch + ch : ch;\n    token_c.content = '';\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = '';\n      state.tokens[delimiters[startDelim.end + 1].token].content = '';\n      i--;\n    }\n  }\n}\n\n// Walk through delimiter list and replace text tokens with tags\n//\nfunction emphasis_post_process(state) {\n  const tokens_meta = state.tokens_meta;\n  const max = state.tokens_meta.length;\n  postProcess(state, state.delimiters);\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n}\nvar r_emphasis = {\n  tokenize: emphasis_tokenize,\n  postProcess: emphasis_post_process\n};\n\n// Process [link](<to> \"stuff\")\n\nfunction link(state, silent) {\n  let code, label, res, ref;\n  let href = '';\n  let title = '';\n  let start = state.pos;\n  let parseReference = true;\n  if (state.src.charCodeAt(state.pos) !== 0x5B /* [ */) {\n    return false;\n  }\n  const oldPos = state.pos;\n  const max = state.posMax;\n  const labelStart = state.pos + 1;\n  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) {\n    return false;\n  }\n  let pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28 /* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false;\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) {\n        break;\n      }\n    }\n    if (pos >= max) {\n      return false;\n    }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                ^^ skipping these spaces\n      start = pos;\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) {\n          break;\n        }\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                  ^^^^^^^ parsing link title\n      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n      if (pos < max && start !== pos && res.ok) {\n        title = res.str;\n        pos = res.pos;\n\n        // [link](  <href>  \"title\"  )\n        //                         ^^ skipping these spaces\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos);\n          if (!isSpace(code) && code !== 0x0A) {\n            break;\n          }\n        }\n      }\n    }\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29 /* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true;\n    }\n    pos++;\n  }\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') {\n      return false;\n    }\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B /* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) {\n      label = state.src.slice(labelStart, labelEnd);\n    }\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n    const token_o = state.push('link_open', 'a', 1);\n    const attrs = [['href', href]];\n    token_o.attrs = attrs;\n    if (title) {\n      attrs.push(['title', title]);\n    }\n    state.linkLevel++;\n    state.md.inline.tokenize(state);\n    state.linkLevel--;\n    state.push('link_close', 'a', -1);\n  }\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n}\n\n// Process ![image](<src> \"title\")\n\nfunction image(state, silent) {\n  let code, content, label, pos, ref, res, title, start;\n  let href = '';\n  const oldPos = state.pos;\n  const max = state.posMax;\n  if (state.src.charCodeAt(state.pos) !== 0x21 /* ! */) {\n    return false;\n  }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B /* [ */) {\n    return false;\n  }\n  const labelStart = state.pos + 2;\n  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) {\n    return false;\n  }\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28 /* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) {\n        break;\n      }\n    }\n    if (pos >= max) {\n      return false;\n    }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) {\n        break;\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) {\n          break;\n        }\n      }\n    } else {\n      title = '';\n    }\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29 /* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') {\n      return false;\n    }\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B /* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) {\n      label = state.src.slice(labelStart, labelEnd);\n    }\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd);\n    const tokens = [];\n    state.md.inline.parse(content, state.md, state.env, tokens);\n    const token = state.push('image', 'img', 0);\n    const attrs = [['src', href], ['alt', '']];\n    token.attrs = attrs;\n    token.children = tokens;\n    token.content = content;\n    if (title) {\n      attrs.push(['title', title]);\n    }\n  }\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n}\n\n// Process autolinks '<protocol:...>'\n\n/* eslint max-len:0 */\nconst EMAIL_RE = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;\n/* eslint-disable-next-line no-control-regex */\nconst AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\\x00-\\x20]*)$/;\nfunction autolink(state, silent) {\n  let pos = state.pos;\n  if (state.src.charCodeAt(pos) !== 0x3C /* < */) {\n    return false;\n  }\n  const start = state.pos;\n  const max = state.posMax;\n  for (;;) {\n    if (++pos >= max) return false;\n    const ch = state.src.charCodeAt(pos);\n    if (ch === 0x3C /* < */) return false;\n    if (ch === 0x3E /* > */) break;\n  }\n  const url = state.src.slice(start + 1, pos);\n  if (AUTOLINK_RE.test(url)) {\n    const fullUrl = state.md.normalizeLink(url);\n    if (!state.md.validateLink(fullUrl)) {\n      return false;\n    }\n    if (!silent) {\n      const token_o = state.push('link_open', 'a', 1);\n      token_o.attrs = [['href', fullUrl]];\n      token_o.markup = 'autolink';\n      token_o.info = 'auto';\n      const token_t = state.push('text', '', 0);\n      token_t.content = state.md.normalizeLinkText(url);\n      const token_c = state.push('link_close', 'a', -1);\n      token_c.markup = 'autolink';\n      token_c.info = 'auto';\n    }\n    state.pos += url.length + 2;\n    return true;\n  }\n  if (EMAIL_RE.test(url)) {\n    const fullUrl = state.md.normalizeLink('mailto:' + url);\n    if (!state.md.validateLink(fullUrl)) {\n      return false;\n    }\n    if (!silent) {\n      const token_o = state.push('link_open', 'a', 1);\n      token_o.attrs = [['href', fullUrl]];\n      token_o.markup = 'autolink';\n      token_o.info = 'auto';\n      const token_t = state.push('text', '', 0);\n      token_t.content = state.md.normalizeLinkText(url);\n      const token_c = state.push('link_close', 'a', -1);\n      token_c.markup = 'autolink';\n      token_c.info = 'auto';\n    }\n    state.pos += url.length + 2;\n    return true;\n  }\n  return false;\n}\n\n// Process html tags\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\nfunction isLetter(ch) {\n  /* eslint no-bitwise:0 */\n  const lc = ch | 0x20; // to lower case\n  return lc >= 0x61 /* a */ && lc <= 0x7a /* z */;\n}\nfunction html_inline(state, silent) {\n  if (!state.md.options.html) {\n    return false;\n  }\n\n  // Check start\n  const max = state.posMax;\n  const pos = state.pos;\n  if (state.src.charCodeAt(pos) !== 0x3C /* < */ || pos + 2 >= max) {\n    return false;\n  }\n\n  // Quick fail on second char\n  const ch = state.src.charCodeAt(pos + 1);\n  if (ch !== 0x21 /* ! */ && ch !== 0x3F /* ? */ && ch !== 0x2F /* / */ && !isLetter(ch)) {\n    return false;\n  }\n  const match = state.src.slice(pos).match(HTML_TAG_RE);\n  if (!match) {\n    return false;\n  }\n  if (!silent) {\n    const token = state.push('html_inline', '', 0);\n    token.content = match[0];\n    if (isLinkOpen(token.content)) state.linkLevel++;\n    if (isLinkClose(token.content)) state.linkLevel--;\n  }\n  state.pos += match[0].length;\n  return true;\n}\n\n// Process html entity - &#123;, &#xAF;, &quot;, ...\n\nconst DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;\nconst NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;\nfunction entity(state, silent) {\n  const pos = state.pos;\n  const max = state.posMax;\n  if (state.src.charCodeAt(pos) !== 0x26 /* & */) return false;\n  if (pos + 1 >= max) return false;\n  const ch = state.src.charCodeAt(pos + 1);\n  if (ch === 0x23 /* # */) {\n    const match = state.src.slice(pos).match(DIGITAL_RE);\n    if (match) {\n      if (!silent) {\n        const code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n        const token = state.push('text_special', '', 0);\n        token.content = isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);\n        token.markup = match[0];\n        token.info = 'entity';\n      }\n      state.pos += match[0].length;\n      return true;\n    }\n  } else {\n    const match = state.src.slice(pos).match(NAMED_RE);\n    if (match) {\n      const decoded = entities.decodeHTML(match[0]);\n      if (decoded !== match[0]) {\n        if (!silent) {\n          const token = state.push('text_special', '', 0);\n          token.content = decoded;\n          token.markup = match[0];\n          token.info = 'entity';\n        }\n        state.pos += match[0].length;\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n// For each opening emphasis-like marker find a matching closing one\n//\n\nfunction processDelimiters(delimiters) {\n  const openersBottom = {};\n  const max = delimiters.length;\n  if (!max) return;\n\n  // headerIdx is the first delimiter of the current (where closer is) delimiter run\n  let headerIdx = 0;\n  let lastTokenIdx = -2; // needs any value lower than -1\n  const jumps = [];\n  for (let closerIdx = 0; closerIdx < max; closerIdx++) {\n    const closer = delimiters[closerIdx];\n    jumps.push(0);\n\n    // markers belong to same delimiter run if:\n    //  - they have adjacent tokens\n    //  - AND markers are the same\n    //\n    if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {\n      headerIdx = closerIdx;\n    }\n    lastTokenIdx = closer.token;\n\n    // Length is only used for emphasis-specific \"rule of 3\",\n    // if it's not defined (in strikethrough or 3rd party plugins),\n    // we can default it to 0 to disable those checks.\n    //\n    closer.length = closer.length || 0;\n    if (!closer.close) continue;\n\n    // Previously calculated lower bounds (previous fails)\n    // for each marker, each delimiter length modulo 3,\n    // and for whether this closer can be an opener;\n    // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460\n    /* eslint-disable-next-line no-prototype-builtins */\n    if (!openersBottom.hasOwnProperty(closer.marker)) {\n      openersBottom[closer.marker] = [-1, -1, -1, -1, -1, -1];\n    }\n    const minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + closer.length % 3];\n    let openerIdx = headerIdx - jumps[headerIdx] - 1;\n    let newMinOpenerIdx = openerIdx;\n    for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {\n      const opener = delimiters[openerIdx];\n      if (opener.marker !== closer.marker) continue;\n      if (opener.open && opener.end < 0) {\n        let isOddMatch = false;\n\n        // from spec:\n        //\n        // If one of the delimiters can both open and close emphasis, then the\n        // sum of the lengths of the delimiter runs containing the opening and\n        // closing delimiters must not be a multiple of 3 unless both lengths\n        // are multiples of 3.\n        //\n        if (opener.close || closer.open) {\n          if ((opener.length + closer.length) % 3 === 0) {\n            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n              isOddMatch = true;\n            }\n          }\n        }\n        if (!isOddMatch) {\n          // If previous delimiter cannot be an opener, we can safely skip\n          // the entire sequence in future checks. This is required to make\n          // sure algorithm has linear complexity (see *_*_*_*_*_... case).\n          //\n          const lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? jumps[openerIdx - 1] + 1 : 0;\n          jumps[closerIdx] = closerIdx - openerIdx + lastJump;\n          jumps[openerIdx] = lastJump;\n          closer.open = false;\n          opener.end = closerIdx;\n          opener.close = false;\n          newMinOpenerIdx = -1;\n          // treat next token as start of run,\n          // it optimizes skips in **<...>**a**<...>** pathological case\n          lastTokenIdx = -2;\n          break;\n        }\n      }\n    }\n    if (newMinOpenerIdx !== -1) {\n      // If match for this delimiter run failed, we want to set lower bound for\n      // future lookups. This is required to make sure algorithm has linear\n      // complexity.\n      //\n      // See details here:\n      // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442\n      //\n      openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length || 0) % 3] = newMinOpenerIdx;\n    }\n  }\n}\nfunction link_pairs(state) {\n  const tokens_meta = state.tokens_meta;\n  const max = state.tokens_meta.length;\n  processDelimiters(state.delimiters);\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      processDelimiters(tokens_meta[curr].delimiters);\n    }\n  }\n}\n\n// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\n\nfunction fragments_join(state) {\n  let curr, last;\n  let level = 0;\n  const tokens = state.tokens;\n  const max = state.tokens.length;\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels after emphasis/strikethrough turns some text nodes\n    // into opening/closing tags\n    if (tokens[curr].nesting < 0) level--; // closing tag\n    tokens[curr].level = level;\n    if (tokens[curr].nesting > 0) level++; // opening tag\n\n    if (tokens[curr].type === 'text' && curr + 1 < max && tokens[curr + 1].type === 'text') {\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n    } else {\n      if (curr !== last) {\n        tokens[last] = tokens[curr];\n      }\n      last++;\n    }\n  }\n  if (curr !== last) {\n    tokens.length = last;\n  }\n}\n\n/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n\n\n// Parser rules\n\nconst _rules = [['text', text], ['linkify', linkify], ['newline', newline], ['escape', escape], ['backticks', backtick], ['strikethrough', r_strikethrough.tokenize], ['emphasis', r_emphasis.tokenize], ['link', link], ['image', image], ['autolink', autolink], ['html_inline', html_inline], ['entity', entity]];\n\n// `rule2` ruleset was created specifically for emphasis/strikethrough\n// post-processing and may be changed in the future.\n//\n// Don't use this for anything except pairs (plugins working with `balance_pairs`).\n//\nconst _rules2 = [['balance_pairs', link_pairs], ['strikethrough', r_strikethrough.postProcess], ['emphasis', r_emphasis.postProcess],\n// rules for pairs separate '**' into its own text tokens, which may be left unused,\n// rule below merges unused segments back with the rest of the text\n['fragments_join', fragments_join]];\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline() {\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler();\n  for (let i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler();\n  for (let i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n  }\n}\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  const pos = state.pos;\n  const rules = this.ruler.getRules('');\n  const len = rules.length;\n  const maxNesting = state.md.options.maxNesting;\n  const cache = state.cache;\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos];\n    return;\n  }\n  let ok = false;\n  if (state.level < maxNesting) {\n    for (let i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++;\n      ok = rules[i](state, true);\n      state.level--;\n      if (ok) {\n        if (pos >= state.pos) {\n          throw new Error(\"inline rule didn't increment state.pos\");\n        }\n        break;\n      }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax;\n  }\n  if (!ok) {\n    state.pos++;\n  }\n  cache[pos] = state.pos;\n};\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  const rules = this.ruler.getRules('');\n  const len = rules.length;\n  const end = state.posMax;\n  const maxNesting = state.md.options.maxNesting;\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n    const prevPos = state.pos;\n    let ok = false;\n    if (state.level < maxNesting) {\n      for (let i = 0; i < len; i++) {\n        ok = rules[i](state, false);\n        if (ok) {\n          if (prevPos >= state.pos) {\n            throw new Error(\"inline rule didn't increment state.pos\");\n          }\n          break;\n        }\n      }\n    }\n    if (ok) {\n      if (state.pos >= end) {\n        break;\n      }\n      continue;\n    }\n    state.pending += state.src[state.pos++];\n  }\n  if (state.pending) {\n    state.pushPending();\n  }\n};\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  const state = new this.State(str, md, env, outTokens);\n  this.tokenize(state);\n  const rules = this.ruler2.getRules('');\n  const len = rules.length;\n  for (let i = 0; i < len; i++) {\n    rules[i](state);\n  }\n};\nParserInline.prototype.State = StateInline;\n\n// markdown-it default options\n\nvar cfg_default = {\n  options: {\n    // Enable HTML tags in source\n    html: false,\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: false,\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n    // autoconvert URL-like texts to links\n    linkify: false,\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019',\n    /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n    // Internal protection, recursion limit\n    maxNesting: 100\n  },\n  components: {\n    core: {},\n    block: {},\n    inline: {}\n  }\n};\n\n// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\nvar cfg_zero = {\n  options: {\n    // Enable HTML tags in source\n    html: false,\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: false,\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n    // autoconvert URL-like texts to links\n    linkify: false,\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019',\n    /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n    // Internal protection, recursion limit\n    maxNesting: 20\n  },\n  components: {\n    core: {\n      rules: ['normalize', 'block', 'inline', 'text_join']\n    },\n    block: {\n      rules: ['paragraph']\n    },\n    inline: {\n      rules: ['text'],\n      rules2: ['balance_pairs', 'fragments_join']\n    }\n  }\n};\n\n// Commonmark default options\n\nvar cfg_commonmark = {\n  options: {\n    // Enable HTML tags in source\n    html: true,\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: true,\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n    // autoconvert URL-like texts to links\n    linkify: false,\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019',\n    /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n    // Internal protection, recursion limit\n    maxNesting: 20\n  },\n  components: {\n    core: {\n      rules: ['normalize', 'block', 'inline', 'text_join']\n    },\n    block: {\n      rules: ['blockquote', 'code', 'fence', 'heading', 'hr', 'html_block', 'lheading', 'list', 'reference', 'paragraph']\n    },\n    inline: {\n      rules: ['autolink', 'backticks', 'emphasis', 'entity', 'escape', 'html_inline', 'image', 'link', 'newline', 'text'],\n      rules2: ['balance_pairs', 'emphasis', 'fragments_join']\n    }\n  }\n};\n\n// Main parser class\n\nconst config = {\n  default: cfg_default,\n  zero: cfg_zero,\n  commonmark: cfg_commonmark\n};\n\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nconst BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\nconst GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\nfunction validateLink(url) {\n  // url should be normalized at this point, and existing entities are decoded\n  const str = url.trim().toLowerCase();\n  return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) : true;\n}\nconst RECODE_HOSTNAME_FOR = ['http:', 'https:', 'mailto:'];\nfunction normalizeLink(url) {\n  const parsed = mdurl__namespace.parse(url, true);\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname);\n      } catch (er) {/**/}\n    }\n  }\n  return mdurl__namespace.encode(mdurl__namespace.format(parsed));\n}\nfunction normalizeLinkText(url) {\n  const parsed = mdurl__namespace.parse(url, true);\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname);\n      } catch (er) {/**/}\n    }\n  }\n\n  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\n  return mdurl__namespace.decode(mdurl__namespace.format(parsed), mdurl__namespace.decode.defaultChars + '%');\n}\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>` or `<code>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre><code class=\"hljs\">' +\n *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre><code class=\"hljs\">' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt(presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options);\n  }\n  if (!options) {\n    if (!isString(presetName)) {\n      options = presetName || {};\n      presetName = 'default';\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline();\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock();\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new Core();\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).\n   **/\n  this.renderer = new Renderer();\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt();\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink;\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink;\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText;\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.mjs).\n   **/\n  this.utils = utils;\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = assign({}, helpers);\n  this.options = {};\n  this.configure(presetName);\n  if (options) {\n    this.set(options);\n  }\n}\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  assign(this.options, options);\n  return this;\n};\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you will - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  const self = this;\n  if (isString(presets)) {\n    const presetName = presets;\n    presets = config[presetName];\n    if (!presets) {\n      throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name');\n    }\n  }\n  if (!presets) {\n    throw new Error('Wrong `markdown-it` preset, can\\'t be empty');\n  }\n  if (presets.options) {\n    self.set(presets.options);\n  }\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules);\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2);\n      }\n    });\n  }\n  return this;\n};\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  let result = [];\n  if (!Array.isArray(list)) {\n    list = [list];\n  }\n  ['core', 'block', 'inline'].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true));\n  }, this);\n  result = result.concat(this.inline.ruler2.enable(list, true));\n  const missed = list.filter(function (name) {\n    return result.indexOf(name) < 0;\n  });\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  let result = [];\n  if (!Array.isArray(list)) {\n    list = [list];\n  }\n  ['core', 'block', 'inline'].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true));\n  }, this);\n  result = result.concat(this.inline.ruler2.disable(list, true));\n  const missed = list.filter(function (name) {\n    return result.indexOf(name) < 0;\n  });\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  const args = [this].concat(Array.prototype.slice.call(arguments, 1));\n  plugin.apply(plugin, args);\n  return this;\n};\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and return list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String');\n  }\n  const state = new this.core.State(src, this, env);\n  this.core.process(state);\n  return state.tokens;\n};\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {};\n  return this.renderer.render(this.parse(src, env), this.options, env);\n};\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  const state = new this.core.State(src, this, env);\n  state.inlineMode = true;\n  this.core.process(state);\n  return state.tokens;\n};\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {};\n  return this.renderer.render(this.parseInline(src, env), this.options, env);\n};\n\nmodule.exports = MarkdownIt;\n"],"mappings":"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Q,CAAC,IAAI,CAAC,EAAE;MACzE,IAAI;QACFF,MAAM,CAACC,QAAQ,GAAGpgB,QAAQ,CAACsgB,OAAO,CAACH,MAAM,CAACC,QAAQ,CAAC;MACrD,CAAC,CAAC,OAAOG,EAAE,EAAE,CAAC;IAChB;EACF;EACA,OAAOvf,gBAAgB,CAACwf,MAAM,CAACxf,gBAAgB,CAACyf,MAAM,CAACN,MAAM,CAAC,CAAC;AACjE;AACA,SAAS9R,iBAAiBA,CAACN,GAAG,EAAE;EAC9B,MAAMoS,MAAM,GAAGnf,gBAAgB,CAACgM,KAAK,CAACe,GAAG,EAAE,IAAI,CAAC;EAChD,IAAIoS,MAAM,CAACC,QAAQ,EAAE;IACnB;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,CAACD,MAAM,CAACE,QAAQ,IAAIH,mBAAmB,CAACjc,OAAO,CAACkc,MAAM,CAACE,QAAQ,CAAC,IAAI,CAAC,EAAE;MACzE,IAAI;QACFF,MAAM,CAACC,QAAQ,GAAGpgB,QAAQ,CAAC0gB,SAAS,CAACP,MAAM,CAACC,QAAQ,CAAC;MACvD,CAAC,CAAC,OAAOG,EAAE,EAAE,CAAC;IAChB;EACF;;EAEA;EACA,OAAOvf,gBAAgB,CAAC2f,MAAM,CAAC3f,gBAAgB,CAACyf,MAAM,CAACN,MAAM,CAAC,EAAEnf,gBAAgB,CAAC2f,MAAM,CAACC,YAAY,GAAG,GAAG,CAAC;AAC7G;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAACC,UAAU,EAAE5Z,OAAO,EAAE;EACvC,IAAI,EAAE,IAAI,YAAY2Z,UAAU,CAAC,EAAE;IACjC,OAAO,IAAIA,UAAU,CAACC,UAAU,EAAE5Z,OAAO,CAAC;EAC5C;EACA,IAAI,CAACA,OAAO,EAAE;IACZ,IAAI,CAAC3F,QAAQ,CAACuf,UAAU,CAAC,EAAE;MACzB5Z,OAAO,GAAG4Z,UAAU,IAAI,CAAC,CAAC;MAC1BA,UAAU,GAAG,SAAS;IACxB;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACza,MAAM,GAAG,IAAIgZ,YAAY,CAAC,CAAC;;EAEhC;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC5V,KAAK,GAAG,IAAIoQ,WAAW,CAAC,CAAC;;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC4F,IAAI,GAAG,IAAIrO,IAAI,CAAC,CAAC;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC2P,QAAQ,GAAG,IAAI3X,QAAQ,CAAC,CAAC;;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACkE,OAAO,GAAG,IAAIvN,SAAS,CAAC,CAAC;;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACmO,YAAY,GAAGA,YAAY;;EAEhC;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACD,aAAa,GAAGA,a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"},"metadata":{},"sourceType":"script","externalDependencies":[]}