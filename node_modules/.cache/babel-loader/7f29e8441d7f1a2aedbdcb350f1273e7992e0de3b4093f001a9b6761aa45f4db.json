{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nvar uc_micro = require('uc.micro');\nfunction reFactory(opts) {\n  const re = {};\n  opts = opts || {};\n  re.src_Any = uc_micro.Any.source;\n  re.src_Cc = uc_micro.Cc.source;\n  re.src_Z = uc_micro.Z.source;\n  re.src_P = uc_micro.P.source;\n\n  // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n  re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join('|');\n\n  // \\p{\\Z\\Cc} (white spaces + control)\n  re.src_ZCc = [re.src_Z, re.src_Cc].join('|');\n\n  // Experimental. List of chars, completely prohibited in links\n  // because can separate it from other part of text\n  const text_separators = '[><\\uff5c]';\n\n  // All possible word characters (everything without punctuation, spaces & controls)\n  // Defined via punctuation & spaces to save space\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n  re.src_pseudo_letter = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';\n  // The same as abothe but without [0-9]\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\n  re.src_ip4 = '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';\n\n  // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n  re.src_auth = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?';\n  re.src_port = '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?';\n  re.src_host_terminator = '(?=$|' + text_separators + '|' + re.src_ZPCc + ')' + '(?!' + (opts['---'] ? '-(?!--)|' : '-|') + '_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))';\n  re.src_path = '(?:' + '[/?#]' + '(?:' + '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-;]).|' + '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' + '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' + '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' + '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' + \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" +\n  // allow `I'm_king` if no pair found\n  \"\\\\'(?=\" + re.src_pseudo_letter + '|[-])|' +\n  // google has many dots in \"google search\" links (#66, #81).\n  // github has ... in commit range links,\n  // Restrict to\n  // - english\n  // - percent-encoded\n  // - parts of file path\n  // - params separator\n  // until more examples found.\n  '\\\\.{2,}[a-zA-Z0-9%/&]|' + '\\\\.(?!' + re.src_ZCc + '|[.]|$)|' + (opts['---'] ? '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n  : '\\\\-+|') +\n  // allow `,,,` in paths\n  ',(?!' + re.src_ZCc + '|$)|' +\n  // allow `;` if not followed by space-like char\n  ';(?!' + re.src_ZCc + '|$)|' +\n  // allow `!!!` in paths, but not at the end\n  '\\\\!+(?!' + re.src_ZCc + '|[!]|$)|' + '\\\\?(?!' + re.src_ZCc + '|[?]|$)' + ')+' + '|\\\\/' + ')?';\n\n  // Allow anything in markdown spec, forbid quote (\") at the first position\n  // because emails enclosed in quotes are far more common\n  re.src_email_name = '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*';\n  re.src_xn = 'xn--[a-z0-9\\\\-]{1,59}';\n\n  // More to read about domain names\n  // http://serverfault.com/questions/638260/\n\n  re.src_domain_root =\n  // Allow letters & digits (http://test1)\n  '(?:' + re.src_xn + '|' + re.src_pseudo_letter + '{1,63}' + ')';\n  re.src_domain = '(?:' + re.src_xn + '|' + '(?:' + re.src_pseudo_letter + ')' + '|' + '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' + ')';\n  re.src_host = '(?:' +\n  // Don't need IP check, because digits are already allowed in normal domain names\n  //   src_ip4 +\n  // '|' +\n  '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain /* _root */ + ')' + ')';\n  re.tpl_host_fuzzy = '(?:' + re.src_ip4 + '|' + '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' + ')';\n  re.tpl_host_no_ip_fuzzy = '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))';\n  re.src_host_strict = re.src_host + re.src_host_terminator;\n  re.tpl_host_fuzzy_strict = re.tpl_host_fuzzy + re.src_host_terminator;\n  re.src_host_port_strict = re.src_host + re.src_port + re.src_host_terminator;\n  re.tpl_host_port_fuzzy_strict = re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n  re.tpl_host_port_no_ip_fuzzy_strict = re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n\n  //\n  // Main rules\n  //\n\n  // Rude test fuzzy links by host, for quick deny\n  re.tpl_host_fuzzy_test = 'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';\n  re.tpl_email_fuzzy = '(^|' + text_separators + '|\"|\\\\(|' + re.src_ZCc + ')' + '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';\n  re.tpl_link_fuzzy =\n  // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n  // but can start with > (markdown blockquote)\n  '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' + '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';\n  re.tpl_link_no_ip_fuzzy =\n  // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n  // but can start with > (markdown blockquote)\n  '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' + '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';\n  return re;\n}\n\n//\n// Helpers\n//\n\n// Merge objects\n//\nfunction assign(obj /* from1, from2, from3, ... */) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  sources.forEach(function (source) {\n    if (!source) {\n      return;\n    }\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n  return obj;\n}\nfunction _class(obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isString(obj) {\n  return _class(obj) === '[object String]';\n}\nfunction isObject(obj) {\n  return _class(obj) === '[object Object]';\n}\nfunction isRegExp(obj) {\n  return _class(obj) === '[object RegExp]';\n}\nfunction isFunction(obj) {\n  return _class(obj) === '[object Function]';\n}\nfunction escapeRE(str) {\n  return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&');\n}\n\n//\n\nconst defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n};\nfunction isOptionsObj(obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    /* eslint-disable-next-line no-prototype-builtins */\n    return acc || defaultOptions.hasOwnProperty(k);\n  }, false);\n}\nconst defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos);\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http = new RegExp('^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i');\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'https:': 'http:',\n  'ftp:': 'http:',\n  '//': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos);\n      if (!self.re.no_http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http = new RegExp('^' + self.re.src_auth +\n        // Don't allow single-level domains, because of false positives like '//test'\n        // with code comments\n        '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' + self.re.src_port + self.re.src_host_terminator + self.re.src_path, 'i');\n      }\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') {\n          return 0;\n        }\n        if (pos >= 3 && text[pos - 3] === '/') {\n          return 0;\n        }\n        return tail.match(self.re.no_http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos);\n      if (!self.re.mailto) {\n        self.re.mailto = new RegExp('^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i');\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length;\n      }\n      return 0;\n    }\n  }\n};\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\n/* eslint-disable-next-line max-len */\nconst tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nconst tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');\nfunction resetScanCache(self) {\n  self.__index__ = -1;\n  self.__text_cache__ = '';\n}\nfunction createValidator(re) {\n  return function (text, pos) {\n    const tail = text.slice(pos);\n    if (re.test(tail)) {\n      return tail.match(re)[0].length;\n    }\n    return 0;\n  };\n}\nfunction createNormalizer() {\n  return function (match, self) {\n    self.normalize(match);\n  };\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile(self) {\n  // Load & clone RE patterns.\n  const re = self.re = reFactory(self.__opts__);\n\n  // Define dynamic patterns\n  const tlds = self.__tlds__.slice();\n  self.onCompile();\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re);\n  }\n  tlds.push(re.src_xn);\n  re.src_tlds = tlds.join('|');\n  function untpl(tpl) {\n    return tpl.replace('%TLDS%', re.src_tlds);\n  }\n  re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n  re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n  re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\n\n  //\n  // Compile each schema\n  //\n\n  const aliases = [];\n  self.__compiled__ = {}; // Reset compiled data\n\n  function schemaError(name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n  }\n  Object.keys(self.__schemas__).forEach(function (name) {\n    const val = self.__schemas__[name];\n\n    // skip disabled methods\n    if (val === null) {\n      return;\n    }\n    const compiled = {\n      validate: null,\n      link: null\n    };\n    self.__compiled__[name] = compiled;\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate);\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate;\n      } else {\n        schemaError(name, val);\n      }\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize;\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer();\n      } else {\n        schemaError(name, val);\n      }\n      return;\n    }\n    if (isString(val)) {\n      aliases.push(name);\n      return;\n    }\n    schemaError(name, val);\n  });\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return;\n    }\n    self.__compiled__[alias].validate = self.__compiled__[self.__schemas__[alias]].validate;\n    self.__compiled__[alias].normalize = self.__compiled__[self.__schemas__[alias]].normalize;\n  });\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = {\n    validate: null,\n    normalize: createNormalizer()\n  };\n\n  //\n  // Build schema condition\n  //\n  const slist = Object.keys(self.__compiled__).filter(function (name) {\n    // Filter disabled & fake schemas\n    return name.length > 0 && self.__compiled__[name];\n  }).map(escapeRE).join('|');\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n  self.re.schema_at_start = RegExp('^' + self.re.schema_search.source, 'i');\n  self.re.pretest = RegExp('(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@', 'i');\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self);\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match(self, shift) {\n  const start = self.__index__;\n  const end = self.__last_index__;\n  const text = self.__text_cache__.slice(start, end);\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema = self.__schema__.toLowerCase();\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index = start + shift;\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift;\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw = text;\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text = text;\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url = text;\n}\nfunction createMatch(self, shift) {\n  const match = new Match(self, shift);\n  self.__compiled__[match.schema].normalize(match, self);\n  return match;\n}\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt(schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options);\n  }\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas;\n      schemas = {};\n    }\n  }\n  this.__opts__ = assign({}, defaultOptions, options);\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__ = -1;\n  this.__last_index__ = -1; // Next scan position\n  this.__schema__ = '';\n  this.__text_cache__ = '';\n  this.__schemas__ = assign({}, defaultSchemas, schemas);\n  this.__compiled__ = {};\n  this.__tlds__ = tlds_default;\n  this.__tlds_replaced__ = false;\n  this.re = {};\n  compile(this);\n}\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add(schema, definition) {\n  this.__schemas__[schema] = definition;\n  compile(this);\n  return this;\n};\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set(options) {\n  this.__opts__ = assign(this.__opts__, options);\n  return this;\n};\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__ = -1;\n  if (!text.length) {\n    return false;\n  }\n  let m, ml, me, len, shift, next, re, tld_pos, at_pos;\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search;\n    re.lastIndex = 0;\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\n      if (len) {\n        this.__schema__ = m[2];\n        this.__index__ = m.index + m[1].length;\n        this.__last_index__ = m.index + m[0].length + len;\n        break;\n      }\n    }\n  }\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test);\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n          shift = ml.index + ml[1].length;\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__ = '';\n            this.__index__ = shift;\n            this.__last_index__ = ml.index + ml[0].length;\n          }\n        }\n      }\n    }\n  }\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@');\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n        shift = me.index + me[1].length;\n        next = me.index + me[0].length;\n        if (this.__index__ < 0 || shift < this.__index__ || shift === this.__index__ && next > this.__last_index__) {\n          this.__schema__ = 'mailto:';\n          this.__index__ = shift;\n          this.__last_index__ = next;\n        }\n      }\n    }\n  }\n  return this.__index__ >= 0;\n};\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest(text) {\n  return this.re.pretest.test(text);\n};\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0;\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\n};\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match(text) {\n  const result = [];\n  let shift = 0;\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift));\n    shift = this.__last_index__;\n  }\n\n  // Cut head if cache was used\n  let tail = shift ? text.slice(shift) : text;\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift));\n    tail = tail.slice(this.__last_index__);\n    shift += this.__last_index__;\n  }\n  if (result.length) {\n    return result;\n  }\n  return null;\n};\n\n/**\n * LinkifyIt#matchAtStart(text) -> Match|null\n *\n * Returns fully-formed (not fuzzy) link if it starts at the beginning\n * of the string, and null otherwise.\n **/\nLinkifyIt.prototype.matchAtStart = function matchAtStart(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__ = -1;\n  if (!text.length) return null;\n  const m = this.re.schema_at_start.exec(text);\n  if (!m) return null;\n  const len = this.testSchemaAt(text, m[2], m[0].length);\n  if (!len) return null;\n  this.__schema__ = m[2];\n  this.__index__ = m.index + m[1].length;\n  this.__last_index__ = m.index + m[0].length + len;\n  return createMatch(this, 0);\n};\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds(list, keepOld) {\n  list = Array.isArray(list) ? list : [list];\n  if (!keepOld) {\n    this.__tlds__ = list.slice();\n    this.__tlds_replaced__ = true;\n    compile(this);\n    return this;\n  }\n  this.__tlds__ = this.__tlds__.concat(list).sort().filter(function (el, idx, arr) {\n    return el !== arr[idx - 1];\n  }).reverse();\n  compile(this);\n  return this;\n};\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize(match) {\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) {\n    match.url = 'http://' + match.url;\n  }\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url;\n  }\n};\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile() {};\nmodule.exports = LinkifyIt;","map":{"version":3,"names":["require","uc_micro","reFactory","opts","re","src_Any","Any","source","src_Cc","Cc","src_Z","Z","src_P","P","src_ZPCc","join","src_ZCc","text_separators","src_pseudo_letter","src_ip4","src_auth","src_port","src_host_terminator","src_path","src_email_name","src_xn","src_domain_root","src_domain","src_host","tpl_host_fuzzy","tpl_host_no_ip_fuzzy","src_host_strict","tpl_host_fuzzy_strict","src_host_port_strict","tpl_host_port_fuzzy_strict","tpl_host_port_no_ip_fuzzy_strict","tpl_host_fuzzy_test","tpl_email_fuzzy","tpl_link_fuzzy","tpl_link_no_ip_fuzzy","assign","obj","sources","Array","prototype","slice","call","arguments","forEach","Object","keys","key","_class","toString","isString","isObject","isRegExp","isFunction","escapeRE","str","replace","defaultOptions","fuzzyLink","fuzzyEmail","fuzzyIP","isOptionsObj","reduce","acc","k","hasOwnProperty","defaultSchemas","validate","text","pos","self","tail","http","RegExp","test","match","length","no_http","mailto","tlds_2ch_src_re","tlds_default","split","resetScanCache","__index__","__text_cache__","createValidator","createNormalizer","normalize","compile","__opts__","tlds","__tlds__","onCompile","__tlds_replaced__","push","src_tlds","untpl","tpl","email_fuzzy","link_fuzzy","link_no_ip_fuzzy","host_fuzzy_test","aliases","__compiled__","schemaError","name","val","Error","__schemas__","compiled","link","alias","slist","filter","map","schema_test","schema_search","schema_at_start","pretest","Match","shift","start","end","__last_index__","schema","__schema__","toLowerCase","index","lastIndex","raw","url","createMatch","LinkifyIt","schemas","options","add","definition","set","m","ml","me","len","next","tld_pos","at_pos","exec","testSchemaAt","search","indexOf","result","matchAtStart","list","keepOld","isArray","concat","sort","el","idx","arr","reverse","module","exports"],"sources":["/Users/wangxiaokang/Desktop/SpringBoot/vue-project/node_modules/linkify-it/build/index.cjs.js"],"sourcesContent":["'use strict';\n\nvar uc_micro = require('uc.micro');\n\nfunction reFactory (opts) {\n  const re = {};\n  opts = opts || {};\n\n  re.src_Any = uc_micro.Any.source;\n  re.src_Cc = uc_micro.Cc.source;\n  re.src_Z = uc_micro.Z.source;\n  re.src_P = uc_micro.P.source;\n\n  // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n  re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join('|');\n\n  // \\p{\\Z\\Cc} (white spaces + control)\n  re.src_ZCc = [re.src_Z, re.src_Cc].join('|');\n\n  // Experimental. List of chars, completely prohibited in links\n  // because can separate it from other part of text\n  const text_separators = '[><\\uff5c]';\n\n  // All possible word characters (everything without punctuation, spaces & controls)\n  // Defined via punctuation & spaces to save space\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n  re.src_pseudo_letter = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';\n  // The same as abothe but without [0-9]\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\n  re.src_ip4 =\n\n    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';\n\n  // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n  re.src_auth = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?';\n\n  re.src_port =\n\n    '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?';\n\n  re.src_host_terminator =\n\n    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')' +\n    '(?!' + (opts['---'] ? '-(?!--)|' : '-|') + '_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))';\n\n  re.src_path =\n\n    '(?:' +\n      '[/?#]' +\n        '(?:' +\n          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-;]).|' +\n          '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' +\n          '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' +\n          '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' +\n          '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' +\n          \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" +\n\n          // allow `I'm_king` if no pair found\n          \"\\\\'(?=\" + re.src_pseudo_letter + '|[-])|' +\n\n          // google has many dots in \"google search\" links (#66, #81).\n          // github has ... in commit range links,\n          // Restrict to\n          // - english\n          // - percent-encoded\n          // - parts of file path\n          // - params separator\n          // until more examples found.\n          '\\\\.{2,}[a-zA-Z0-9%/&]|' +\n\n          '\\\\.(?!' + re.src_ZCc + '|[.]|$)|' +\n          (opts['---']\n            ? '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n            : '\\\\-+|'\n          ) +\n          // allow `,,,` in paths\n          ',(?!' + re.src_ZCc + '|$)|' +\n\n          // allow `;` if not followed by space-like char\n          ';(?!' + re.src_ZCc + '|$)|' +\n\n          // allow `!!!` in paths, but not at the end\n          '\\\\!+(?!' + re.src_ZCc + '|[!]|$)|' +\n\n          '\\\\?(?!' + re.src_ZCc + '|[?]|$)' +\n        ')+' +\n      '|\\\\/' +\n    ')?';\n\n  // Allow anything in markdown spec, forbid quote (\") at the first position\n  // because emails enclosed in quotes are far more common\n  re.src_email_name =\n\n    '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*';\n\n  re.src_xn =\n\n    'xn--[a-z0-9\\\\-]{1,59}';\n\n  // More to read about domain names\n  // http://serverfault.com/questions/638260/\n\n  re.src_domain_root =\n\n    // Allow letters & digits (http://test1)\n    '(?:' +\n      re.src_xn +\n      '|' +\n      re.src_pseudo_letter + '{1,63}' +\n    ')';\n\n  re.src_domain =\n\n    '(?:' +\n      re.src_xn +\n      '|' +\n      '(?:' + re.src_pseudo_letter + ')' +\n      '|' +\n      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +\n    ')';\n\n  re.src_host =\n\n    '(?:' +\n    // Don't need IP check, because digits are already allowed in normal domain names\n    //   src_ip4 +\n    // '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain/* _root */ + ')' +\n    ')';\n\n  re.tpl_host_fuzzy =\n\n    '(?:' +\n      re.src_ip4 +\n    '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' +\n    ')';\n\n  re.tpl_host_no_ip_fuzzy =\n\n    '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))';\n\n  re.src_host_strict =\n\n    re.src_host + re.src_host_terminator;\n\n  re.tpl_host_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_host_terminator;\n\n  re.src_host_port_strict =\n\n    re.src_host + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_no_ip_fuzzy_strict =\n\n    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n\n  //\n  // Main rules\n  //\n\n  // Rude test fuzzy links by host, for quick deny\n  re.tpl_host_fuzzy_test =\n\n    'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';\n\n  re.tpl_email_fuzzy =\n\n      '(^|' + text_separators + '|\"|\\\\(|' + re.src_ZCc + ')' +\n      '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';\n\n  re.tpl_link_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';\n\n  re.tpl_link_no_ip_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';\n\n  return re\n}\n\n//\n// Helpers\n//\n\n// Merge objects\n//\nfunction assign (obj /* from1, from2, from3, ... */) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj\n}\n\nfunction _class (obj) { return Object.prototype.toString.call(obj) }\nfunction isString (obj) { return _class(obj) === '[object String]' }\nfunction isObject (obj) { return _class(obj) === '[object Object]' }\nfunction isRegExp (obj) { return _class(obj) === '[object RegExp]' }\nfunction isFunction (obj) { return _class(obj) === '[object Function]' }\n\nfunction escapeRE (str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&') }\n\n//\n\nconst defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n};\n\nfunction isOptionsObj (obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    /* eslint-disable-next-line no-prototype-builtins */\n    return acc || defaultOptions.hasOwnProperty(k)\n  }, false)\n}\n\nconst defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos);\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http = new RegExp(\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\n        );\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length\n      }\n      return 0\n    }\n  },\n  'https:': 'http:',\n  'ftp:': 'http:',\n  '//': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos);\n\n      if (!self.re.no_http) {\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http = new RegExp(\n          '^' +\n          self.re.src_auth +\n          // Don't allow single-level domains, because of false positives like '//test'\n          // with code comments\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\n          self.re.src_port +\n          self.re.src_host_terminator +\n          self.re.src_path,\n\n          'i'\n        );\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') { return 0 }\n        if (pos >= 3 && text[pos - 3] === '/') { return 0 }\n        return tail.match(self.re.no_http)[0].length\n      }\n      return 0\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos);\n\n      if (!self.re.mailto) {\n        self.re.mailto = new RegExp(\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\n        );\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length\n      }\n      return 0\n    }\n  }\n};\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\n/* eslint-disable-next-line max-len */\nconst tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nconst tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');\n\nfunction resetScanCache (self) {\n  self.__index__ = -1;\n  self.__text_cache__ = '';\n}\n\nfunction createValidator (re) {\n  return function (text, pos) {\n    const tail = text.slice(pos);\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length\n    }\n    return 0\n  }\n}\n\nfunction createNormalizer () {\n  return function (match, self) {\n    self.normalize(match);\n  }\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile (self) {\n  // Load & clone RE patterns.\n  const re = self.re = reFactory(self.__opts__);\n\n  // Define dynamic patterns\n  const tlds = self.__tlds__.slice();\n\n  self.onCompile();\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re);\n  }\n  tlds.push(re.src_xn);\n\n  re.src_tlds = tlds.join('|');\n\n  function untpl (tpl) { return tpl.replace('%TLDS%', re.src_tlds) }\n\n  re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n  re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n  re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\n\n  //\n  // Compile each schema\n  //\n\n  const aliases = [];\n\n  self.__compiled__ = {}; // Reset compiled data\n\n  function schemaError (name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val)\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    const val = self.__schemas__[name];\n\n    // skip disabled methods\n    if (val === null) { return }\n\n    const compiled = { validate: null, link: null };\n\n    self.__compiled__[name] = compiled;\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate);\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate;\n      } else {\n        schemaError(name, val);\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize;\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer();\n      } else {\n        schemaError(name, val);\n      }\n\n      return\n    }\n\n    if (isString(val)) {\n      aliases.push(name);\n      return\n    }\n\n    schemaError(name, val);\n  });\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return\n    }\n\n    self.__compiled__[alias].validate =\n      self.__compiled__[self.__schemas__[alias]].validate;\n    self.__compiled__[alias].normalize =\n      self.__compiled__[self.__schemas__[alias]].normalize;\n  });\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() };\n\n  //\n  // Build schema condition\n  //\n  const slist = Object.keys(self.__compiled__)\n    .filter(function (name) {\n      // Filter disabled & fake schemas\n      return name.length > 0 && self.__compiled__[name]\n    })\n    .map(escapeRE)\n    .join('|');\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n  self.re.schema_at_start = RegExp('^' + self.re.schema_search.source, 'i');\n\n  self.re.pretest = RegExp(\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\n    'i'\n  );\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self);\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match (self, shift) {\n  const start = self.__index__;\n  const end = self.__last_index__;\n  const text = self.__text_cache__.slice(start, end);\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema = self.__schema__.toLowerCase();\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index = start + shift;\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift;\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw = text;\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text = text;\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url = text;\n}\n\nfunction createMatch (self, shift) {\n  const match = new Match(self, shift);\n\n  self.__compiled__[match.schema].normalize(match, self);\n\n  return match\n}\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt (schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options)\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas;\n      schemas = {};\n    }\n  }\n\n  this.__opts__ = assign({}, defaultOptions, options);\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__ = -1;\n  this.__last_index__ = -1; // Next scan position\n  this.__schema__ = '';\n  this.__text_cache__ = '';\n\n  this.__schemas__ = assign({}, defaultSchemas, schemas);\n  this.__compiled__ = {};\n\n  this.__tlds__ = tlds_default;\n  this.__tlds_replaced__ = false;\n\n  this.re = {};\n\n  compile(this);\n}\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add (schema, definition) {\n  this.__schemas__[schema] = definition;\n  compile(this);\n  return this\n};\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set (options) {\n  this.__opts__ = assign(this.__opts__, options);\n  return this\n};\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test (text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__ = -1;\n\n  if (!text.length) { return false }\n\n  let m, ml, me, len, shift, next, re, tld_pos, at_pos;\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search;\n    re.lastIndex = 0;\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\n      if (len) {\n        this.__schema__ = m[2];\n        this.__index__ = m.index + m[1].length;\n        this.__last_index__ = m.index + m[0].length + len;\n        break\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test);\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n          shift = ml.index + ml[1].length;\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__ = '';\n            this.__index__ = shift;\n            this.__last_index__ = ml.index + ml[0].length;\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@');\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n        shift = me.index + me[1].length;\n        next = me.index + me[0].length;\n\n        if (this.__index__ < 0 || shift < this.__index__ ||\n            (shift === this.__index__ && next > this.__last_index__)) {\n          this.__schema__ = 'mailto:';\n          this.__index__ = shift;\n          this.__last_index__ = next;\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0\n};\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest (text) {\n  return this.re.pretest.test(text)\n};\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt (text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this)\n};\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match (text) {\n  const result = [];\n  let shift = 0;\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift));\n    shift = this.__last_index__;\n  }\n\n  // Cut head if cache was used\n  let tail = shift ? text.slice(shift) : text;\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift));\n\n    tail = tail.slice(this.__last_index__);\n    shift += this.__last_index__;\n  }\n\n  if (result.length) {\n    return result\n  }\n\n  return null\n};\n\n/**\n * LinkifyIt#matchAtStart(text) -> Match|null\n *\n * Returns fully-formed (not fuzzy) link if it starts at the beginning\n * of the string, and null otherwise.\n **/\nLinkifyIt.prototype.matchAtStart = function matchAtStart (text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__ = -1;\n\n  if (!text.length) return null\n\n  const m = this.re.schema_at_start.exec(text);\n  if (!m) return null\n\n  const len = this.testSchemaAt(text, m[2], m[0].length);\n  if (!len) return null\n\n  this.__schema__ = m[2];\n  this.__index__ = m.index + m[1].length;\n  this.__last_index__ = m.index + m[0].length + len;\n\n  return createMatch(this, 0)\n};\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds (list, keepOld) {\n  list = Array.isArray(list) ? list : [list];\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice();\n    this.__tlds_replaced__ = true;\n    compile(this);\n    return this\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list)\n    .sort()\n    .filter(function (el, idx, arr) {\n      return el !== arr[idx - 1]\n    })\n    .reverse();\n\n  compile(this);\n  return this\n};\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize (match) {\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) { match.url = 'http://' + match.url; }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url;\n  }\n};\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile () {\n};\n\nmodule.exports = LinkifyIt;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}